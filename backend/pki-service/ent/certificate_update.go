// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hm-edu/pki-service/ent/certificate"
	"github.com/hm-edu/pki-service/ent/domain"
	"github.com/hm-edu/pki-service/ent/predicate"
)

// CertificateUpdate is the builder for updating Certificate entities.
type CertificateUpdate struct {
	config
	hooks    []Hook
	mutation *CertificateMutation
}

// Where appends a list predicates to the CertificateUpdate builder.
func (cu *CertificateUpdate) Where(ps ...predicate.Certificate) *CertificateUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *CertificateUpdate) SetUpdateTime(t time.Time) *CertificateUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// SetSslId sets the "sslId" field.
func (cu *CertificateUpdate) SetSslId(i int) *CertificateUpdate {
	cu.mutation.ResetSslId()
	cu.mutation.SetSslId(i)
	return cu
}

// SetNillableSslId sets the "sslId" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableSslId(i *int) *CertificateUpdate {
	if i != nil {
		cu.SetSslId(*i)
	}
	return cu
}

// AddSslId adds i to the "sslId" field.
func (cu *CertificateUpdate) AddSslId(i int) *CertificateUpdate {
	cu.mutation.AddSslId(i)
	return cu
}

// ClearSslId clears the value of the "sslId" field.
func (cu *CertificateUpdate) ClearSslId() *CertificateUpdate {
	cu.mutation.ClearSslId()
	return cu
}

// SetSerial sets the "serial" field.
func (cu *CertificateUpdate) SetSerial(s string) *CertificateUpdate {
	cu.mutation.SetSerial(s)
	return cu
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableSerial(s *string) *CertificateUpdate {
	if s != nil {
		cu.SetSerial(*s)
	}
	return cu
}

// ClearSerial clears the value of the "serial" field.
func (cu *CertificateUpdate) ClearSerial() *CertificateUpdate {
	cu.mutation.ClearSerial()
	return cu
}

// SetCommonName sets the "commonName" field.
func (cu *CertificateUpdate) SetCommonName(s string) *CertificateUpdate {
	cu.mutation.SetCommonName(s)
	return cu
}

// SetNotBefore sets the "notBefore" field.
func (cu *CertificateUpdate) SetNotBefore(t time.Time) *CertificateUpdate {
	cu.mutation.SetNotBefore(t)
	return cu
}

// SetNillableNotBefore sets the "notBefore" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableNotBefore(t *time.Time) *CertificateUpdate {
	if t != nil {
		cu.SetNotBefore(*t)
	}
	return cu
}

// ClearNotBefore clears the value of the "notBefore" field.
func (cu *CertificateUpdate) ClearNotBefore() *CertificateUpdate {
	cu.mutation.ClearNotBefore()
	return cu
}

// SetNotAfter sets the "notAfter" field.
func (cu *CertificateUpdate) SetNotAfter(t time.Time) *CertificateUpdate {
	cu.mutation.SetNotAfter(t)
	return cu
}

// SetNillableNotAfter sets the "notAfter" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableNotAfter(t *time.Time) *CertificateUpdate {
	if t != nil {
		cu.SetNotAfter(*t)
	}
	return cu
}

// ClearNotAfter clears the value of the "notAfter" field.
func (cu *CertificateUpdate) ClearNotAfter() *CertificateUpdate {
	cu.mutation.ClearNotAfter()
	return cu
}

// SetIssuedBy sets the "issuedBy" field.
func (cu *CertificateUpdate) SetIssuedBy(s string) *CertificateUpdate {
	cu.mutation.SetIssuedBy(s)
	return cu
}

// SetCreated sets the "created" field.
func (cu *CertificateUpdate) SetCreated(t time.Time) *CertificateUpdate {
	cu.mutation.SetCreated(t)
	return cu
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableCreated(t *time.Time) *CertificateUpdate {
	if t != nil {
		cu.SetCreated(*t)
	}
	return cu
}

// ClearCreated clears the value of the "created" field.
func (cu *CertificateUpdate) ClearCreated() *CertificateUpdate {
	cu.mutation.ClearCreated()
	return cu
}

// SetStatus sets the "status" field.
func (cu *CertificateUpdate) SetStatus(c certificate.Status) *CertificateUpdate {
	cu.mutation.SetStatus(c)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableStatus(c *certificate.Status) *CertificateUpdate {
	if c != nil {
		cu.SetStatus(*c)
	}
	return cu
}

// AddDomainIDs adds the "domains" edge to the Domain entity by IDs.
func (cu *CertificateUpdate) AddDomainIDs(ids ...int) *CertificateUpdate {
	cu.mutation.AddDomainIDs(ids...)
	return cu
}

// AddDomains adds the "domains" edges to the Domain entity.
func (cu *CertificateUpdate) AddDomains(d ...*Domain) *CertificateUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDomainIDs(ids...)
}

// Mutation returns the CertificateMutation object of the builder.
func (cu *CertificateUpdate) Mutation() *CertificateMutation {
	return cu.mutation
}

// ClearDomains clears all "domains" edges to the Domain entity.
func (cu *CertificateUpdate) ClearDomains() *CertificateUpdate {
	cu.mutation.ClearDomains()
	return cu
}

// RemoveDomainIDs removes the "domains" edge to Domain entities by IDs.
func (cu *CertificateUpdate) RemoveDomainIDs(ids ...int) *CertificateUpdate {
	cu.mutation.RemoveDomainIDs(ids...)
	return cu
}

// RemoveDomains removes "domains" edges to Domain entities.
func (cu *CertificateUpdate) RemoveDomains(d ...*Domain) *CertificateUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDomainIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CertificateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CertificateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CertificateUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CertificateUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CertificateUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CertificateUpdate) defaults() error {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		if certificate.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized certificate.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := certificate.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *CertificateUpdate) check() error {
	if v, ok := cu.mutation.CommonName(); ok {
		if err := certificate.CommonNameValidator(v); err != nil {
			return &ValidationError{Name: "commonName", err: fmt.Errorf(`ent: validator failed for field "Certificate.commonName": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Status(); ok {
		if err := certificate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Certificate.status": %w`, err)}
		}
	}
	return nil
}

func (cu *CertificateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   certificate.Table,
			Columns: certificate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: certificate.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: certificate.FieldUpdateTime,
		})
	}
	if value, ok := cu.mutation.SslId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: certificate.FieldSslId,
		})
	}
	if value, ok := cu.mutation.AddedSslId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: certificate.FieldSslId,
		})
	}
	if cu.mutation.SslIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: certificate.FieldSslId,
		})
	}
	if value, ok := cu.mutation.Serial(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: certificate.FieldSerial,
		})
	}
	if cu.mutation.SerialCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: certificate.FieldSerial,
		})
	}
	if value, ok := cu.mutation.CommonName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: certificate.FieldCommonName,
		})
	}
	if value, ok := cu.mutation.NotBefore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: certificate.FieldNotBefore,
		})
	}
	if cu.mutation.NotBeforeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: certificate.FieldNotBefore,
		})
	}
	if value, ok := cu.mutation.NotAfter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: certificate.FieldNotAfter,
		})
	}
	if cu.mutation.NotAfterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: certificate.FieldNotAfter,
		})
	}
	if value, ok := cu.mutation.IssuedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: certificate.FieldIssuedBy,
		})
	}
	if value, ok := cu.mutation.Created(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: certificate.FieldCreated,
		})
	}
	if cu.mutation.CreatedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: certificate.FieldCreated,
		})
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: certificate.FieldStatus,
		})
	}
	if cu.mutation.DomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certificate.DomainsTable,
			Columns: certificate.DomainsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: domain.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDomainsIDs(); len(nodes) > 0 && !cu.mutation.DomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certificate.DomainsTable,
			Columns: certificate.DomainsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: domain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DomainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certificate.DomainsTable,
			Columns: certificate.DomainsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: domain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certificate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CertificateUpdateOne is the builder for updating a single Certificate entity.
type CertificateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CertificateMutation
}

// SetUpdateTime sets the "update_time" field.
func (cuo *CertificateUpdateOne) SetUpdateTime(t time.Time) *CertificateUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// SetSslId sets the "sslId" field.
func (cuo *CertificateUpdateOne) SetSslId(i int) *CertificateUpdateOne {
	cuo.mutation.ResetSslId()
	cuo.mutation.SetSslId(i)
	return cuo
}

// SetNillableSslId sets the "sslId" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableSslId(i *int) *CertificateUpdateOne {
	if i != nil {
		cuo.SetSslId(*i)
	}
	return cuo
}

// AddSslId adds i to the "sslId" field.
func (cuo *CertificateUpdateOne) AddSslId(i int) *CertificateUpdateOne {
	cuo.mutation.AddSslId(i)
	return cuo
}

// ClearSslId clears the value of the "sslId" field.
func (cuo *CertificateUpdateOne) ClearSslId() *CertificateUpdateOne {
	cuo.mutation.ClearSslId()
	return cuo
}

// SetSerial sets the "serial" field.
func (cuo *CertificateUpdateOne) SetSerial(s string) *CertificateUpdateOne {
	cuo.mutation.SetSerial(s)
	return cuo
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableSerial(s *string) *CertificateUpdateOne {
	if s != nil {
		cuo.SetSerial(*s)
	}
	return cuo
}

// ClearSerial clears the value of the "serial" field.
func (cuo *CertificateUpdateOne) ClearSerial() *CertificateUpdateOne {
	cuo.mutation.ClearSerial()
	return cuo
}

// SetCommonName sets the "commonName" field.
func (cuo *CertificateUpdateOne) SetCommonName(s string) *CertificateUpdateOne {
	cuo.mutation.SetCommonName(s)
	return cuo
}

// SetNotBefore sets the "notBefore" field.
func (cuo *CertificateUpdateOne) SetNotBefore(t time.Time) *CertificateUpdateOne {
	cuo.mutation.SetNotBefore(t)
	return cuo
}

// SetNillableNotBefore sets the "notBefore" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableNotBefore(t *time.Time) *CertificateUpdateOne {
	if t != nil {
		cuo.SetNotBefore(*t)
	}
	return cuo
}

// ClearNotBefore clears the value of the "notBefore" field.
func (cuo *CertificateUpdateOne) ClearNotBefore() *CertificateUpdateOne {
	cuo.mutation.ClearNotBefore()
	return cuo
}

// SetNotAfter sets the "notAfter" field.
func (cuo *CertificateUpdateOne) SetNotAfter(t time.Time) *CertificateUpdateOne {
	cuo.mutation.SetNotAfter(t)
	return cuo
}

// SetNillableNotAfter sets the "notAfter" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableNotAfter(t *time.Time) *CertificateUpdateOne {
	if t != nil {
		cuo.SetNotAfter(*t)
	}
	return cuo
}

// ClearNotAfter clears the value of the "notAfter" field.
func (cuo *CertificateUpdateOne) ClearNotAfter() *CertificateUpdateOne {
	cuo.mutation.ClearNotAfter()
	return cuo
}

// SetIssuedBy sets the "issuedBy" field.
func (cuo *CertificateUpdateOne) SetIssuedBy(s string) *CertificateUpdateOne {
	cuo.mutation.SetIssuedBy(s)
	return cuo
}

// SetCreated sets the "created" field.
func (cuo *CertificateUpdateOne) SetCreated(t time.Time) *CertificateUpdateOne {
	cuo.mutation.SetCreated(t)
	return cuo
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableCreated(t *time.Time) *CertificateUpdateOne {
	if t != nil {
		cuo.SetCreated(*t)
	}
	return cuo
}

// ClearCreated clears the value of the "created" field.
func (cuo *CertificateUpdateOne) ClearCreated() *CertificateUpdateOne {
	cuo.mutation.ClearCreated()
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CertificateUpdateOne) SetStatus(c certificate.Status) *CertificateUpdateOne {
	cuo.mutation.SetStatus(c)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableStatus(c *certificate.Status) *CertificateUpdateOne {
	if c != nil {
		cuo.SetStatus(*c)
	}
	return cuo
}

// AddDomainIDs adds the "domains" edge to the Domain entity by IDs.
func (cuo *CertificateUpdateOne) AddDomainIDs(ids ...int) *CertificateUpdateOne {
	cuo.mutation.AddDomainIDs(ids...)
	return cuo
}

// AddDomains adds the "domains" edges to the Domain entity.
func (cuo *CertificateUpdateOne) AddDomains(d ...*Domain) *CertificateUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDomainIDs(ids...)
}

// Mutation returns the CertificateMutation object of the builder.
func (cuo *CertificateUpdateOne) Mutation() *CertificateMutation {
	return cuo.mutation
}

// ClearDomains clears all "domains" edges to the Domain entity.
func (cuo *CertificateUpdateOne) ClearDomains() *CertificateUpdateOne {
	cuo.mutation.ClearDomains()
	return cuo
}

// RemoveDomainIDs removes the "domains" edge to Domain entities by IDs.
func (cuo *CertificateUpdateOne) RemoveDomainIDs(ids ...int) *CertificateUpdateOne {
	cuo.mutation.RemoveDomainIDs(ids...)
	return cuo
}

// RemoveDomains removes "domains" edges to Domain entities.
func (cuo *CertificateUpdateOne) RemoveDomains(d ...*Domain) *CertificateUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDomainIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CertificateUpdateOne) Select(field string, fields ...string) *CertificateUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Certificate entity.
func (cuo *CertificateUpdateOne) Save(ctx context.Context) (*Certificate, error) {
	var (
		err  error
		node *Certificate
	)
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CertificateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CertificateUpdateOne) SaveX(ctx context.Context) *Certificate {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CertificateUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CertificateUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CertificateUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		if certificate.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized certificate.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := certificate.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CertificateUpdateOne) check() error {
	if v, ok := cuo.mutation.CommonName(); ok {
		if err := certificate.CommonNameValidator(v); err != nil {
			return &ValidationError{Name: "commonName", err: fmt.Errorf(`ent: validator failed for field "Certificate.commonName": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Status(); ok {
		if err := certificate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Certificate.status": %w`, err)}
		}
	}
	return nil
}

func (cuo *CertificateUpdateOne) sqlSave(ctx context.Context) (_node *Certificate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   certificate.Table,
			Columns: certificate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: certificate.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Certificate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, certificate.FieldID)
		for _, f := range fields {
			if !certificate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != certificate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: certificate.FieldUpdateTime,
		})
	}
	if value, ok := cuo.mutation.SslId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: certificate.FieldSslId,
		})
	}
	if value, ok := cuo.mutation.AddedSslId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: certificate.FieldSslId,
		})
	}
	if cuo.mutation.SslIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: certificate.FieldSslId,
		})
	}
	if value, ok := cuo.mutation.Serial(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: certificate.FieldSerial,
		})
	}
	if cuo.mutation.SerialCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: certificate.FieldSerial,
		})
	}
	if value, ok := cuo.mutation.CommonName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: certificate.FieldCommonName,
		})
	}
	if value, ok := cuo.mutation.NotBefore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: certificate.FieldNotBefore,
		})
	}
	if cuo.mutation.NotBeforeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: certificate.FieldNotBefore,
		})
	}
	if value, ok := cuo.mutation.NotAfter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: certificate.FieldNotAfter,
		})
	}
	if cuo.mutation.NotAfterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: certificate.FieldNotAfter,
		})
	}
	if value, ok := cuo.mutation.IssuedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: certificate.FieldIssuedBy,
		})
	}
	if value, ok := cuo.mutation.Created(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: certificate.FieldCreated,
		})
	}
	if cuo.mutation.CreatedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: certificate.FieldCreated,
		})
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: certificate.FieldStatus,
		})
	}
	if cuo.mutation.DomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certificate.DomainsTable,
			Columns: certificate.DomainsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: domain.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDomainsIDs(); len(nodes) > 0 && !cuo.mutation.DomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certificate.DomainsTable,
			Columns: certificate.DomainsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: domain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DomainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certificate.DomainsTable,
			Columns: certificate.DomainsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: domain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Certificate{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certificate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
