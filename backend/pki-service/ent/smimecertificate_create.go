// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hm-edu/pki-service/ent/smimecertificate"
)

// SmimeCertificateCreate is the builder for creating a SmimeCertificate entity.
type SmimeCertificateCreate struct {
	config
	mutation *SmimeCertificateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (scc *SmimeCertificateCreate) SetCreateTime(t time.Time) *SmimeCertificateCreate {
	scc.mutation.SetCreateTime(t)
	return scc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (scc *SmimeCertificateCreate) SetNillableCreateTime(t *time.Time) *SmimeCertificateCreate {
	if t != nil {
		scc.SetCreateTime(*t)
	}
	return scc
}

// SetUpdateTime sets the "update_time" field.
func (scc *SmimeCertificateCreate) SetUpdateTime(t time.Time) *SmimeCertificateCreate {
	scc.mutation.SetUpdateTime(t)
	return scc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (scc *SmimeCertificateCreate) SetNillableUpdateTime(t *time.Time) *SmimeCertificateCreate {
	if t != nil {
		scc.SetUpdateTime(*t)
	}
	return scc
}

// SetTransactionId sets the "transactionId" field.
func (scc *SmimeCertificateCreate) SetTransactionId(s string) *SmimeCertificateCreate {
	scc.mutation.SetTransactionId(s)
	return scc
}

// SetNillableTransactionId sets the "transactionId" field if the given value is not nil.
func (scc *SmimeCertificateCreate) SetNillableTransactionId(s *string) *SmimeCertificateCreate {
	if s != nil {
		scc.SetTransactionId(*s)
	}
	return scc
}

// SetEmail sets the "email" field.
func (scc *SmimeCertificateCreate) SetEmail(s string) *SmimeCertificateCreate {
	scc.mutation.SetEmail(s)
	return scc
}

// SetSerial sets the "serial" field.
func (scc *SmimeCertificateCreate) SetSerial(s string) *SmimeCertificateCreate {
	scc.mutation.SetSerial(s)
	return scc
}

// SetNotBefore sets the "notBefore" field.
func (scc *SmimeCertificateCreate) SetNotBefore(t time.Time) *SmimeCertificateCreate {
	scc.mutation.SetNotBefore(t)
	return scc
}

// SetNillableNotBefore sets the "notBefore" field if the given value is not nil.
func (scc *SmimeCertificateCreate) SetNillableNotBefore(t *time.Time) *SmimeCertificateCreate {
	if t != nil {
		scc.SetNotBefore(*t)
	}
	return scc
}

// SetNotAfter sets the "notAfter" field.
func (scc *SmimeCertificateCreate) SetNotAfter(t time.Time) *SmimeCertificateCreate {
	scc.mutation.SetNotAfter(t)
	return scc
}

// SetNillableNotAfter sets the "notAfter" field if the given value is not nil.
func (scc *SmimeCertificateCreate) SetNillableNotAfter(t *time.Time) *SmimeCertificateCreate {
	if t != nil {
		scc.SetNotAfter(*t)
	}
	return scc
}

// SetCreated sets the "created" field.
func (scc *SmimeCertificateCreate) SetCreated(t time.Time) *SmimeCertificateCreate {
	scc.mutation.SetCreated(t)
	return scc
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (scc *SmimeCertificateCreate) SetNillableCreated(t *time.Time) *SmimeCertificateCreate {
	if t != nil {
		scc.SetCreated(*t)
	}
	return scc
}

// SetStatus sets the "status" field.
func (scc *SmimeCertificateCreate) SetStatus(s smimecertificate.Status) *SmimeCertificateCreate {
	scc.mutation.SetStatus(s)
	return scc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (scc *SmimeCertificateCreate) SetNillableStatus(s *smimecertificate.Status) *SmimeCertificateCreate {
	if s != nil {
		scc.SetStatus(*s)
	}
	return scc
}

// SetCa sets the "ca" field.
func (scc *SmimeCertificateCreate) SetCa(s string) *SmimeCertificateCreate {
	scc.mutation.SetCa(s)
	return scc
}

// SetNillableCa sets the "ca" field if the given value is not nil.
func (scc *SmimeCertificateCreate) SetNillableCa(s *string) *SmimeCertificateCreate {
	if s != nil {
		scc.SetCa(*s)
	}
	return scc
}

// Mutation returns the SmimeCertificateMutation object of the builder.
func (scc *SmimeCertificateCreate) Mutation() *SmimeCertificateMutation {
	return scc.mutation
}

// Save creates the SmimeCertificate in the database.
func (scc *SmimeCertificateCreate) Save(ctx context.Context) (*SmimeCertificate, error) {
	if err := scc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, scc.sqlSave, scc.mutation, scc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scc *SmimeCertificateCreate) SaveX(ctx context.Context) *SmimeCertificate {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *SmimeCertificateCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *SmimeCertificateCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scc *SmimeCertificateCreate) defaults() error {
	if _, ok := scc.mutation.CreateTime(); !ok {
		if smimecertificate.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized smimecertificate.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := smimecertificate.DefaultCreateTime()
		scc.mutation.SetCreateTime(v)
	}
	if _, ok := scc.mutation.UpdateTime(); !ok {
		if smimecertificate.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized smimecertificate.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := smimecertificate.DefaultUpdateTime()
		scc.mutation.SetUpdateTime(v)
	}
	if _, ok := scc.mutation.Status(); !ok {
		v := smimecertificate.DefaultStatus
		scc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (scc *SmimeCertificateCreate) check() error {
	if _, ok := scc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SmimeCertificate.create_time"`)}
	}
	if _, ok := scc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "SmimeCertificate.update_time"`)}
	}
	if _, ok := scc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "SmimeCertificate.email"`)}
	}
	if v, ok := scc.mutation.Email(); ok {
		if err := smimecertificate.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "SmimeCertificate.email": %w`, err)}
		}
	}
	if _, ok := scc.mutation.Serial(); !ok {
		return &ValidationError{Name: "serial", err: errors.New(`ent: missing required field "SmimeCertificate.serial"`)}
	}
	if v, ok := scc.mutation.Serial(); ok {
		if err := smimecertificate.SerialValidator(v); err != nil {
			return &ValidationError{Name: "serial", err: fmt.Errorf(`ent: validator failed for field "SmimeCertificate.serial": %w`, err)}
		}
	}
	if _, ok := scc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SmimeCertificate.status"`)}
	}
	if v, ok := scc.mutation.Status(); ok {
		if err := smimecertificate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SmimeCertificate.status": %w`, err)}
		}
	}
	return nil
}

func (scc *SmimeCertificateCreate) sqlSave(ctx context.Context) (*SmimeCertificate, error) {
	if err := scc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	scc.mutation.id = &_node.ID
	scc.mutation.done = true
	return _node, nil
}

func (scc *SmimeCertificateCreate) createSpec() (*SmimeCertificate, *sqlgraph.CreateSpec) {
	var (
		_node = &SmimeCertificate{config: scc.config}
		_spec = sqlgraph.NewCreateSpec(smimecertificate.Table, sqlgraph.NewFieldSpec(smimecertificate.FieldID, field.TypeInt))
	)
	_spec.OnConflict = scc.conflict
	if value, ok := scc.mutation.CreateTime(); ok {
		_spec.SetField(smimecertificate.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := scc.mutation.UpdateTime(); ok {
		_spec.SetField(smimecertificate.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := scc.mutation.TransactionId(); ok {
		_spec.SetField(smimecertificate.FieldTransactionId, field.TypeString, value)
		_node.TransactionId = value
	}
	if value, ok := scc.mutation.Email(); ok {
		_spec.SetField(smimecertificate.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := scc.mutation.Serial(); ok {
		_spec.SetField(smimecertificate.FieldSerial, field.TypeString, value)
		_node.Serial = value
	}
	if value, ok := scc.mutation.NotBefore(); ok {
		_spec.SetField(smimecertificate.FieldNotBefore, field.TypeTime, value)
		_node.NotBefore = &value
	}
	if value, ok := scc.mutation.NotAfter(); ok {
		_spec.SetField(smimecertificate.FieldNotAfter, field.TypeTime, value)
		_node.NotAfter = value
	}
	if value, ok := scc.mutation.Created(); ok {
		_spec.SetField(smimecertificate.FieldCreated, field.TypeTime, value)
		_node.Created = &value
	}
	if value, ok := scc.mutation.Status(); ok {
		_spec.SetField(smimecertificate.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := scc.mutation.Ca(); ok {
		_spec.SetField(smimecertificate.FieldCa, field.TypeString, value)
		_node.Ca = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SmimeCertificate.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SmimeCertificateUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (scc *SmimeCertificateCreate) OnConflict(opts ...sql.ConflictOption) *SmimeCertificateUpsertOne {
	scc.conflict = opts
	return &SmimeCertificateUpsertOne{
		create: scc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SmimeCertificate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scc *SmimeCertificateCreate) OnConflictColumns(columns ...string) *SmimeCertificateUpsertOne {
	scc.conflict = append(scc.conflict, sql.ConflictColumns(columns...))
	return &SmimeCertificateUpsertOne{
		create: scc,
	}
}

type (
	// SmimeCertificateUpsertOne is the builder for "upsert"-ing
	//  one SmimeCertificate node.
	SmimeCertificateUpsertOne struct {
		create *SmimeCertificateCreate
	}

	// SmimeCertificateUpsert is the "OnConflict" setter.
	SmimeCertificateUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *SmimeCertificateUpsert) SetUpdateTime(v time.Time) *SmimeCertificateUpsert {
	u.Set(smimecertificate.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SmimeCertificateUpsert) UpdateUpdateTime() *SmimeCertificateUpsert {
	u.SetExcluded(smimecertificate.FieldUpdateTime)
	return u
}

// SetTransactionId sets the "transactionId" field.
func (u *SmimeCertificateUpsert) SetTransactionId(v string) *SmimeCertificateUpsert {
	u.Set(smimecertificate.FieldTransactionId, v)
	return u
}

// UpdateTransactionId sets the "transactionId" field to the value that was provided on create.
func (u *SmimeCertificateUpsert) UpdateTransactionId() *SmimeCertificateUpsert {
	u.SetExcluded(smimecertificate.FieldTransactionId)
	return u
}

// ClearTransactionId clears the value of the "transactionId" field.
func (u *SmimeCertificateUpsert) ClearTransactionId() *SmimeCertificateUpsert {
	u.SetNull(smimecertificate.FieldTransactionId)
	return u
}

// SetEmail sets the "email" field.
func (u *SmimeCertificateUpsert) SetEmail(v string) *SmimeCertificateUpsert {
	u.Set(smimecertificate.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *SmimeCertificateUpsert) UpdateEmail() *SmimeCertificateUpsert {
	u.SetExcluded(smimecertificate.FieldEmail)
	return u
}

// SetSerial sets the "serial" field.
func (u *SmimeCertificateUpsert) SetSerial(v string) *SmimeCertificateUpsert {
	u.Set(smimecertificate.FieldSerial, v)
	return u
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *SmimeCertificateUpsert) UpdateSerial() *SmimeCertificateUpsert {
	u.SetExcluded(smimecertificate.FieldSerial)
	return u
}

// SetNotBefore sets the "notBefore" field.
func (u *SmimeCertificateUpsert) SetNotBefore(v time.Time) *SmimeCertificateUpsert {
	u.Set(smimecertificate.FieldNotBefore, v)
	return u
}

// UpdateNotBefore sets the "notBefore" field to the value that was provided on create.
func (u *SmimeCertificateUpsert) UpdateNotBefore() *SmimeCertificateUpsert {
	u.SetExcluded(smimecertificate.FieldNotBefore)
	return u
}

// ClearNotBefore clears the value of the "notBefore" field.
func (u *SmimeCertificateUpsert) ClearNotBefore() *SmimeCertificateUpsert {
	u.SetNull(smimecertificate.FieldNotBefore)
	return u
}

// SetNotAfter sets the "notAfter" field.
func (u *SmimeCertificateUpsert) SetNotAfter(v time.Time) *SmimeCertificateUpsert {
	u.Set(smimecertificate.FieldNotAfter, v)
	return u
}

// UpdateNotAfter sets the "notAfter" field to the value that was provided on create.
func (u *SmimeCertificateUpsert) UpdateNotAfter() *SmimeCertificateUpsert {
	u.SetExcluded(smimecertificate.FieldNotAfter)
	return u
}

// ClearNotAfter clears the value of the "notAfter" field.
func (u *SmimeCertificateUpsert) ClearNotAfter() *SmimeCertificateUpsert {
	u.SetNull(smimecertificate.FieldNotAfter)
	return u
}

// SetCreated sets the "created" field.
func (u *SmimeCertificateUpsert) SetCreated(v time.Time) *SmimeCertificateUpsert {
	u.Set(smimecertificate.FieldCreated, v)
	return u
}

// UpdateCreated sets the "created" field to the value that was provided on create.
func (u *SmimeCertificateUpsert) UpdateCreated() *SmimeCertificateUpsert {
	u.SetExcluded(smimecertificate.FieldCreated)
	return u
}

// ClearCreated clears the value of the "created" field.
func (u *SmimeCertificateUpsert) ClearCreated() *SmimeCertificateUpsert {
	u.SetNull(smimecertificate.FieldCreated)
	return u
}

// SetStatus sets the "status" field.
func (u *SmimeCertificateUpsert) SetStatus(v smimecertificate.Status) *SmimeCertificateUpsert {
	u.Set(smimecertificate.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SmimeCertificateUpsert) UpdateStatus() *SmimeCertificateUpsert {
	u.SetExcluded(smimecertificate.FieldStatus)
	return u
}

// SetCa sets the "ca" field.
func (u *SmimeCertificateUpsert) SetCa(v string) *SmimeCertificateUpsert {
	u.Set(smimecertificate.FieldCa, v)
	return u
}

// UpdateCa sets the "ca" field to the value that was provided on create.
func (u *SmimeCertificateUpsert) UpdateCa() *SmimeCertificateUpsert {
	u.SetExcluded(smimecertificate.FieldCa)
	return u
}

// ClearCa clears the value of the "ca" field.
func (u *SmimeCertificateUpsert) ClearCa() *SmimeCertificateUpsert {
	u.SetNull(smimecertificate.FieldCa)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SmimeCertificate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SmimeCertificateUpsertOne) UpdateNewValues() *SmimeCertificateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(smimecertificate.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SmimeCertificate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SmimeCertificateUpsertOne) Ignore() *SmimeCertificateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SmimeCertificateUpsertOne) DoNothing() *SmimeCertificateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SmimeCertificateCreate.OnConflict
// documentation for more info.
func (u *SmimeCertificateUpsertOne) Update(set func(*SmimeCertificateUpsert)) *SmimeCertificateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SmimeCertificateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *SmimeCertificateUpsertOne) SetUpdateTime(v time.Time) *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SmimeCertificateUpsertOne) UpdateUpdateTime() *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetTransactionId sets the "transactionId" field.
func (u *SmimeCertificateUpsertOne) SetTransactionId(v string) *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.SetTransactionId(v)
	})
}

// UpdateTransactionId sets the "transactionId" field to the value that was provided on create.
func (u *SmimeCertificateUpsertOne) UpdateTransactionId() *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.UpdateTransactionId()
	})
}

// ClearTransactionId clears the value of the "transactionId" field.
func (u *SmimeCertificateUpsertOne) ClearTransactionId() *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.ClearTransactionId()
	})
}

// SetEmail sets the "email" field.
func (u *SmimeCertificateUpsertOne) SetEmail(v string) *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *SmimeCertificateUpsertOne) UpdateEmail() *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.UpdateEmail()
	})
}

// SetSerial sets the "serial" field.
func (u *SmimeCertificateUpsertOne) SetSerial(v string) *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *SmimeCertificateUpsertOne) UpdateSerial() *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.UpdateSerial()
	})
}

// SetNotBefore sets the "notBefore" field.
func (u *SmimeCertificateUpsertOne) SetNotBefore(v time.Time) *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.SetNotBefore(v)
	})
}

// UpdateNotBefore sets the "notBefore" field to the value that was provided on create.
func (u *SmimeCertificateUpsertOne) UpdateNotBefore() *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.UpdateNotBefore()
	})
}

// ClearNotBefore clears the value of the "notBefore" field.
func (u *SmimeCertificateUpsertOne) ClearNotBefore() *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.ClearNotBefore()
	})
}

// SetNotAfter sets the "notAfter" field.
func (u *SmimeCertificateUpsertOne) SetNotAfter(v time.Time) *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.SetNotAfter(v)
	})
}

// UpdateNotAfter sets the "notAfter" field to the value that was provided on create.
func (u *SmimeCertificateUpsertOne) UpdateNotAfter() *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.UpdateNotAfter()
	})
}

// ClearNotAfter clears the value of the "notAfter" field.
func (u *SmimeCertificateUpsertOne) ClearNotAfter() *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.ClearNotAfter()
	})
}

// SetCreated sets the "created" field.
func (u *SmimeCertificateUpsertOne) SetCreated(v time.Time) *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.SetCreated(v)
	})
}

// UpdateCreated sets the "created" field to the value that was provided on create.
func (u *SmimeCertificateUpsertOne) UpdateCreated() *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.UpdateCreated()
	})
}

// ClearCreated clears the value of the "created" field.
func (u *SmimeCertificateUpsertOne) ClearCreated() *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.ClearCreated()
	})
}

// SetStatus sets the "status" field.
func (u *SmimeCertificateUpsertOne) SetStatus(v smimecertificate.Status) *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SmimeCertificateUpsertOne) UpdateStatus() *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.UpdateStatus()
	})
}

// SetCa sets the "ca" field.
func (u *SmimeCertificateUpsertOne) SetCa(v string) *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.SetCa(v)
	})
}

// UpdateCa sets the "ca" field to the value that was provided on create.
func (u *SmimeCertificateUpsertOne) UpdateCa() *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.UpdateCa()
	})
}

// ClearCa clears the value of the "ca" field.
func (u *SmimeCertificateUpsertOne) ClearCa() *SmimeCertificateUpsertOne {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.ClearCa()
	})
}

// Exec executes the query.
func (u *SmimeCertificateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SmimeCertificateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SmimeCertificateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SmimeCertificateUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SmimeCertificateUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SmimeCertificateCreateBulk is the builder for creating many SmimeCertificate entities in bulk.
type SmimeCertificateCreateBulk struct {
	config
	err      error
	builders []*SmimeCertificateCreate
	conflict []sql.ConflictOption
}

// Save creates the SmimeCertificate entities in the database.
func (sccb *SmimeCertificateCreateBulk) Save(ctx context.Context) ([]*SmimeCertificate, error) {
	if sccb.err != nil {
		return nil, sccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*SmimeCertificate, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SmimeCertificateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *SmimeCertificateCreateBulk) SaveX(ctx context.Context) []*SmimeCertificate {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *SmimeCertificateCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *SmimeCertificateCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SmimeCertificate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SmimeCertificateUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (sccb *SmimeCertificateCreateBulk) OnConflict(opts ...sql.ConflictOption) *SmimeCertificateUpsertBulk {
	sccb.conflict = opts
	return &SmimeCertificateUpsertBulk{
		create: sccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SmimeCertificate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sccb *SmimeCertificateCreateBulk) OnConflictColumns(columns ...string) *SmimeCertificateUpsertBulk {
	sccb.conflict = append(sccb.conflict, sql.ConflictColumns(columns...))
	return &SmimeCertificateUpsertBulk{
		create: sccb,
	}
}

// SmimeCertificateUpsertBulk is the builder for "upsert"-ing
// a bulk of SmimeCertificate nodes.
type SmimeCertificateUpsertBulk struct {
	create *SmimeCertificateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SmimeCertificate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SmimeCertificateUpsertBulk) UpdateNewValues() *SmimeCertificateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(smimecertificate.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SmimeCertificate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SmimeCertificateUpsertBulk) Ignore() *SmimeCertificateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SmimeCertificateUpsertBulk) DoNothing() *SmimeCertificateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SmimeCertificateCreateBulk.OnConflict
// documentation for more info.
func (u *SmimeCertificateUpsertBulk) Update(set func(*SmimeCertificateUpsert)) *SmimeCertificateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SmimeCertificateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *SmimeCertificateUpsertBulk) SetUpdateTime(v time.Time) *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SmimeCertificateUpsertBulk) UpdateUpdateTime() *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetTransactionId sets the "transactionId" field.
func (u *SmimeCertificateUpsertBulk) SetTransactionId(v string) *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.SetTransactionId(v)
	})
}

// UpdateTransactionId sets the "transactionId" field to the value that was provided on create.
func (u *SmimeCertificateUpsertBulk) UpdateTransactionId() *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.UpdateTransactionId()
	})
}

// ClearTransactionId clears the value of the "transactionId" field.
func (u *SmimeCertificateUpsertBulk) ClearTransactionId() *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.ClearTransactionId()
	})
}

// SetEmail sets the "email" field.
func (u *SmimeCertificateUpsertBulk) SetEmail(v string) *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *SmimeCertificateUpsertBulk) UpdateEmail() *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.UpdateEmail()
	})
}

// SetSerial sets the "serial" field.
func (u *SmimeCertificateUpsertBulk) SetSerial(v string) *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *SmimeCertificateUpsertBulk) UpdateSerial() *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.UpdateSerial()
	})
}

// SetNotBefore sets the "notBefore" field.
func (u *SmimeCertificateUpsertBulk) SetNotBefore(v time.Time) *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.SetNotBefore(v)
	})
}

// UpdateNotBefore sets the "notBefore" field to the value that was provided on create.
func (u *SmimeCertificateUpsertBulk) UpdateNotBefore() *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.UpdateNotBefore()
	})
}

// ClearNotBefore clears the value of the "notBefore" field.
func (u *SmimeCertificateUpsertBulk) ClearNotBefore() *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.ClearNotBefore()
	})
}

// SetNotAfter sets the "notAfter" field.
func (u *SmimeCertificateUpsertBulk) SetNotAfter(v time.Time) *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.SetNotAfter(v)
	})
}

// UpdateNotAfter sets the "notAfter" field to the value that was provided on create.
func (u *SmimeCertificateUpsertBulk) UpdateNotAfter() *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.UpdateNotAfter()
	})
}

// ClearNotAfter clears the value of the "notAfter" field.
func (u *SmimeCertificateUpsertBulk) ClearNotAfter() *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.ClearNotAfter()
	})
}

// SetCreated sets the "created" field.
func (u *SmimeCertificateUpsertBulk) SetCreated(v time.Time) *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.SetCreated(v)
	})
}

// UpdateCreated sets the "created" field to the value that was provided on create.
func (u *SmimeCertificateUpsertBulk) UpdateCreated() *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.UpdateCreated()
	})
}

// ClearCreated clears the value of the "created" field.
func (u *SmimeCertificateUpsertBulk) ClearCreated() *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.ClearCreated()
	})
}

// SetStatus sets the "status" field.
func (u *SmimeCertificateUpsertBulk) SetStatus(v smimecertificate.Status) *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SmimeCertificateUpsertBulk) UpdateStatus() *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.UpdateStatus()
	})
}

// SetCa sets the "ca" field.
func (u *SmimeCertificateUpsertBulk) SetCa(v string) *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.SetCa(v)
	})
}

// UpdateCa sets the "ca" field to the value that was provided on create.
func (u *SmimeCertificateUpsertBulk) UpdateCa() *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.UpdateCa()
	})
}

// ClearCa clears the value of the "ca" field.
func (u *SmimeCertificateUpsertBulk) ClearCa() *SmimeCertificateUpsertBulk {
	return u.Update(func(s *SmimeCertificateUpsert) {
		s.ClearCa()
	})
}

// Exec executes the query.
func (u *SmimeCertificateUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SmimeCertificateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SmimeCertificateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SmimeCertificateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
