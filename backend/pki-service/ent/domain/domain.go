// Code generated by ent, DO NOT EDIT.

package domain

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the domain type in the database.
	Label = "domain"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFqdn holds the string denoting the fqdn field in the database.
	FieldFqdn = "fqdn"
	// EdgeCertificates holds the string denoting the certificates edge name in mutations.
	EdgeCertificates = "certificates"
	// Table holds the table name of the domain in the database.
	Table = "domains"
	// CertificatesTable is the table that holds the certificates relation/edge. The primary key declared below.
	CertificatesTable = "certificate_domains"
	// CertificatesInverseTable is the table name for the Certificate entity.
	// It exists in this package in order to avoid circular dependency with the "certificate" package.
	CertificatesInverseTable = "certificates"
)

// Columns holds all SQL columns for domain fields.
var Columns = []string{
	FieldID,
	FieldFqdn,
}

var (
	// CertificatesPrimaryKey and CertificatesColumn2 are the table columns denoting the
	// primary key for the certificates relation (M2M).
	CertificatesPrimaryKey = []string{"certificate_id", "domain_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FqdnValidator is a validator for the "fqdn" field. It is called by the builders before save.
	FqdnValidator func(string) error
)

// OrderOption defines the ordering options for the Domain queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFqdn orders the results by the fqdn field.
func ByFqdn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFqdn, opts...).ToFunc()
}

// ByCertificatesCount orders the results by certificates count.
func ByCertificatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCertificatesStep(), opts...)
	}
}

// ByCertificates orders the results by certificates terms.
func ByCertificates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCertificatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCertificatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CertificatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CertificatesTable, CertificatesPrimaryKey...),
	)
}
