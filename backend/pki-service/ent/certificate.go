// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/hm-edu/pki-service/ent/certificate"
)

// Certificate is the model entity for the Certificate schema.
type Certificate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// SslId holds the value of the "sslId" field.
	SslId int `json:"sslId,omitempty"`
	// Serial holds the value of the "serial" field.
	Serial string `json:"serial,omitempty"`
	// CommonName holds the value of the "commonName" field.
	CommonName string `json:"commonName,omitempty"`
	// NotBefore holds the value of the "notBefore" field.
	NotBefore *time.Time `json:"notBefore,omitempty"`
	// NotAfter holds the value of the "notAfter" field.
	NotAfter time.Time `json:"notAfter,omitempty"`
	// IssuedBy holds the value of the "issuedBy" field.
	IssuedBy *string `json:"issuedBy,omitempty"`
	// Source holds the value of the "source" field.
	Source *string `json:"source,omitempty"`
	// Created holds the value of the "created" field.
	Created *time.Time `json:"created,omitempty"`
	// Status holds the value of the "status" field.
	Status certificate.Status `json:"status,omitempty"`
	// Ca holds the value of the "ca" field.
	Ca *string `json:"ca,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CertificateQuery when eager-loading is set.
	Edges        CertificateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CertificateEdges holds the relations/edges for other nodes in the graph.
type CertificateEdges struct {
	// Domains holds the value of the domains edge.
	Domains []*Domain `json:"domains,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DomainsOrErr returns the Domains value or an error if the edge
// was not loaded in eager-loading.
func (e CertificateEdges) DomainsOrErr() ([]*Domain, error) {
	if e.loadedTypes[0] {
		return e.Domains, nil
	}
	return nil, &NotLoadedError{edge: "domains"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Certificate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case certificate.FieldID, certificate.FieldSslId:
			values[i] = new(sql.NullInt64)
		case certificate.FieldSerial, certificate.FieldCommonName, certificate.FieldIssuedBy, certificate.FieldSource, certificate.FieldStatus, certificate.FieldCa:
			values[i] = new(sql.NullString)
		case certificate.FieldCreateTime, certificate.FieldUpdateTime, certificate.FieldNotBefore, certificate.FieldNotAfter, certificate.FieldCreated:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Certificate fields.
func (c *Certificate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case certificate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case certificate.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case certificate.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		case certificate.FieldSslId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sslId", values[i])
			} else if value.Valid {
				c.SslId = int(value.Int64)
			}
		case certificate.FieldSerial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial", values[i])
			} else if value.Valid {
				c.Serial = value.String
			}
		case certificate.FieldCommonName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commonName", values[i])
			} else if value.Valid {
				c.CommonName = value.String
			}
		case certificate.FieldNotBefore:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field notBefore", values[i])
			} else if value.Valid {
				c.NotBefore = new(time.Time)
				*c.NotBefore = value.Time
			}
		case certificate.FieldNotAfter:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field notAfter", values[i])
			} else if value.Valid {
				c.NotAfter = value.Time
			}
		case certificate.FieldIssuedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issuedBy", values[i])
			} else if value.Valid {
				c.IssuedBy = new(string)
				*c.IssuedBy = value.String
			}
		case certificate.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				c.Source = new(string)
				*c.Source = value.String
			}
		case certificate.FieldCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created", values[i])
			} else if value.Valid {
				c.Created = new(time.Time)
				*c.Created = value.Time
			}
		case certificate.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = certificate.Status(value.String)
			}
		case certificate.FieldCa:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ca", values[i])
			} else if value.Valid {
				c.Ca = new(string)
				*c.Ca = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Certificate.
// This includes values selected through modifiers, order, etc.
func (c *Certificate) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryDomains queries the "domains" edge of the Certificate entity.
func (c *Certificate) QueryDomains() *DomainQuery {
	return NewCertificateClient(c.config).QueryDomains(c)
}

// Update returns a builder for updating this Certificate.
// Note that you need to call Certificate.Unwrap() before calling this method if this Certificate
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Certificate) Update() *CertificateUpdateOne {
	return NewCertificateClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Certificate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Certificate) Unwrap() *Certificate {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Certificate is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Certificate) String() string {
	var builder strings.Builder
	builder.WriteString("Certificate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sslId=")
	builder.WriteString(fmt.Sprintf("%v", c.SslId))
	builder.WriteString(", ")
	builder.WriteString("serial=")
	builder.WriteString(c.Serial)
	builder.WriteString(", ")
	builder.WriteString("commonName=")
	builder.WriteString(c.CommonName)
	builder.WriteString(", ")
	if v := c.NotBefore; v != nil {
		builder.WriteString("notBefore=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("notAfter=")
	builder.WriteString(c.NotAfter.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := c.IssuedBy; v != nil {
		builder.WriteString("issuedBy=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.Source; v != nil {
		builder.WriteString("source=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.Created; v != nil {
		builder.WriteString("created=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	if v := c.Ca; v != nil {
		builder.WriteString("ca=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Certificates is a parsable slice of Certificate.
type Certificates []*Certificate
