// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/hm-edu/pki-service/ent/smimecertificate"
)

// SmimeCertificate is the model entity for the SmimeCertificate schema.
type SmimeCertificate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// TransactionId holds the value of the "transactionId" field.
	TransactionId string `json:"transactionId,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Serial holds the value of the "serial" field.
	Serial string `json:"serial,omitempty"`
	// NotBefore holds the value of the "notBefore" field.
	NotBefore *time.Time `json:"notBefore,omitempty"`
	// NotAfter holds the value of the "notAfter" field.
	NotAfter time.Time `json:"notAfter,omitempty"`
	// Created holds the value of the "created" field.
	Created *time.Time `json:"created,omitempty"`
	// Status holds the value of the "status" field.
	Status smimecertificate.Status `json:"status,omitempty"`
	// Ca holds the value of the "ca" field.
	Ca           *string `json:"ca,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SmimeCertificate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case smimecertificate.FieldID:
			values[i] = new(sql.NullInt64)
		case smimecertificate.FieldTransactionId, smimecertificate.FieldEmail, smimecertificate.FieldSerial, smimecertificate.FieldStatus, smimecertificate.FieldCa:
			values[i] = new(sql.NullString)
		case smimecertificate.FieldCreateTime, smimecertificate.FieldUpdateTime, smimecertificate.FieldNotBefore, smimecertificate.FieldNotAfter, smimecertificate.FieldCreated:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SmimeCertificate fields.
func (sc *SmimeCertificate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case smimecertificate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sc.ID = int(value.Int64)
		case smimecertificate.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sc.CreateTime = value.Time
			}
		case smimecertificate.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sc.UpdateTime = value.Time
			}
		case smimecertificate.FieldTransactionId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transactionId", values[i])
			} else if value.Valid {
				sc.TransactionId = value.String
			}
		case smimecertificate.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				sc.Email = value.String
			}
		case smimecertificate.FieldSerial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial", values[i])
			} else if value.Valid {
				sc.Serial = value.String
			}
		case smimecertificate.FieldNotBefore:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field notBefore", values[i])
			} else if value.Valid {
				sc.NotBefore = new(time.Time)
				*sc.NotBefore = value.Time
			}
		case smimecertificate.FieldNotAfter:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field notAfter", values[i])
			} else if value.Valid {
				sc.NotAfter = value.Time
			}
		case smimecertificate.FieldCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created", values[i])
			} else if value.Valid {
				sc.Created = new(time.Time)
				*sc.Created = value.Time
			}
		case smimecertificate.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sc.Status = smimecertificate.Status(value.String)
			}
		case smimecertificate.FieldCa:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ca", values[i])
			} else if value.Valid {
				sc.Ca = new(string)
				*sc.Ca = value.String
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SmimeCertificate.
// This includes values selected through modifiers, order, etc.
func (sc *SmimeCertificate) Value(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// Update returns a builder for updating this SmimeCertificate.
// Note that you need to call SmimeCertificate.Unwrap() before calling this method if this SmimeCertificate
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *SmimeCertificate) Update() *SmimeCertificateUpdateOne {
	return NewSmimeCertificateClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the SmimeCertificate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *SmimeCertificate) Unwrap() *SmimeCertificate {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: SmimeCertificate is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *SmimeCertificate) String() string {
	var builder strings.Builder
	builder.WriteString("SmimeCertificate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("create_time=")
	builder.WriteString(sc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(sc.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("transactionId=")
	builder.WriteString(sc.TransactionId)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(sc.Email)
	builder.WriteString(", ")
	builder.WriteString("serial=")
	builder.WriteString(sc.Serial)
	builder.WriteString(", ")
	if v := sc.NotBefore; v != nil {
		builder.WriteString("notBefore=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("notAfter=")
	builder.WriteString(sc.NotAfter.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := sc.Created; v != nil {
		builder.WriteString("created=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sc.Status))
	builder.WriteString(", ")
	if v := sc.Ca; v != nil {
		builder.WriteString("ca=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// SmimeCertificates is a parsable slice of SmimeCertificate.
type SmimeCertificates []*SmimeCertificate
