// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hm-edu/pki-service/ent/predicate"
	"github.com/hm-edu/pki-service/ent/smimecertificate"
)

// SmimeCertificateUpdate is the builder for updating SmimeCertificate entities.
type SmimeCertificateUpdate struct {
	config
	hooks    []Hook
	mutation *SmimeCertificateMutation
}

// Where appends a list predicates to the SmimeCertificateUpdate builder.
func (scu *SmimeCertificateUpdate) Where(ps ...predicate.SmimeCertificate) *SmimeCertificateUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetUpdateTime sets the "update_time" field.
func (scu *SmimeCertificateUpdate) SetUpdateTime(t time.Time) *SmimeCertificateUpdate {
	scu.mutation.SetUpdateTime(t)
	return scu
}

// SetTransactionId sets the "transactionId" field.
func (scu *SmimeCertificateUpdate) SetTransactionId(s string) *SmimeCertificateUpdate {
	scu.mutation.SetTransactionId(s)
	return scu
}

// SetNillableTransactionId sets the "transactionId" field if the given value is not nil.
func (scu *SmimeCertificateUpdate) SetNillableTransactionId(s *string) *SmimeCertificateUpdate {
	if s != nil {
		scu.SetTransactionId(*s)
	}
	return scu
}

// ClearTransactionId clears the value of the "transactionId" field.
func (scu *SmimeCertificateUpdate) ClearTransactionId() *SmimeCertificateUpdate {
	scu.mutation.ClearTransactionId()
	return scu
}

// SetEmail sets the "email" field.
func (scu *SmimeCertificateUpdate) SetEmail(s string) *SmimeCertificateUpdate {
	scu.mutation.SetEmail(s)
	return scu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (scu *SmimeCertificateUpdate) SetNillableEmail(s *string) *SmimeCertificateUpdate {
	if s != nil {
		scu.SetEmail(*s)
	}
	return scu
}

// SetSerial sets the "serial" field.
func (scu *SmimeCertificateUpdate) SetSerial(s string) *SmimeCertificateUpdate {
	scu.mutation.SetSerial(s)
	return scu
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (scu *SmimeCertificateUpdate) SetNillableSerial(s *string) *SmimeCertificateUpdate {
	if s != nil {
		scu.SetSerial(*s)
	}
	return scu
}

// SetNotBefore sets the "notBefore" field.
func (scu *SmimeCertificateUpdate) SetNotBefore(t time.Time) *SmimeCertificateUpdate {
	scu.mutation.SetNotBefore(t)
	return scu
}

// SetNillableNotBefore sets the "notBefore" field if the given value is not nil.
func (scu *SmimeCertificateUpdate) SetNillableNotBefore(t *time.Time) *SmimeCertificateUpdate {
	if t != nil {
		scu.SetNotBefore(*t)
	}
	return scu
}

// ClearNotBefore clears the value of the "notBefore" field.
func (scu *SmimeCertificateUpdate) ClearNotBefore() *SmimeCertificateUpdate {
	scu.mutation.ClearNotBefore()
	return scu
}

// SetNotAfter sets the "notAfter" field.
func (scu *SmimeCertificateUpdate) SetNotAfter(t time.Time) *SmimeCertificateUpdate {
	scu.mutation.SetNotAfter(t)
	return scu
}

// SetNillableNotAfter sets the "notAfter" field if the given value is not nil.
func (scu *SmimeCertificateUpdate) SetNillableNotAfter(t *time.Time) *SmimeCertificateUpdate {
	if t != nil {
		scu.SetNotAfter(*t)
	}
	return scu
}

// ClearNotAfter clears the value of the "notAfter" field.
func (scu *SmimeCertificateUpdate) ClearNotAfter() *SmimeCertificateUpdate {
	scu.mutation.ClearNotAfter()
	return scu
}

// SetCreated sets the "created" field.
func (scu *SmimeCertificateUpdate) SetCreated(t time.Time) *SmimeCertificateUpdate {
	scu.mutation.SetCreated(t)
	return scu
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (scu *SmimeCertificateUpdate) SetNillableCreated(t *time.Time) *SmimeCertificateUpdate {
	if t != nil {
		scu.SetCreated(*t)
	}
	return scu
}

// ClearCreated clears the value of the "created" field.
func (scu *SmimeCertificateUpdate) ClearCreated() *SmimeCertificateUpdate {
	scu.mutation.ClearCreated()
	return scu
}

// SetStatus sets the "status" field.
func (scu *SmimeCertificateUpdate) SetStatus(s smimecertificate.Status) *SmimeCertificateUpdate {
	scu.mutation.SetStatus(s)
	return scu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (scu *SmimeCertificateUpdate) SetNillableStatus(s *smimecertificate.Status) *SmimeCertificateUpdate {
	if s != nil {
		scu.SetStatus(*s)
	}
	return scu
}

// SetCa sets the "ca" field.
func (scu *SmimeCertificateUpdate) SetCa(s string) *SmimeCertificateUpdate {
	scu.mutation.SetCa(s)
	return scu
}

// SetNillableCa sets the "ca" field if the given value is not nil.
func (scu *SmimeCertificateUpdate) SetNillableCa(s *string) *SmimeCertificateUpdate {
	if s != nil {
		scu.SetCa(*s)
	}
	return scu
}

// ClearCa clears the value of the "ca" field.
func (scu *SmimeCertificateUpdate) ClearCa() *SmimeCertificateUpdate {
	scu.mutation.ClearCa()
	return scu
}

// Mutation returns the SmimeCertificateMutation object of the builder.
func (scu *SmimeCertificateUpdate) Mutation() *SmimeCertificateMutation {
	return scu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *SmimeCertificateUpdate) Save(ctx context.Context) (int, error) {
	if err := scu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *SmimeCertificateUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *SmimeCertificateUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *SmimeCertificateUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *SmimeCertificateUpdate) defaults() error {
	if _, ok := scu.mutation.UpdateTime(); !ok {
		if smimecertificate.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized smimecertificate.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := smimecertificate.UpdateDefaultUpdateTime()
		scu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (scu *SmimeCertificateUpdate) check() error {
	if v, ok := scu.mutation.Email(); ok {
		if err := smimecertificate.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "SmimeCertificate.email": %w`, err)}
		}
	}
	if v, ok := scu.mutation.Serial(); ok {
		if err := smimecertificate.SerialValidator(v); err != nil {
			return &ValidationError{Name: "serial", err: fmt.Errorf(`ent: validator failed for field "SmimeCertificate.serial": %w`, err)}
		}
	}
	if v, ok := scu.mutation.Status(); ok {
		if err := smimecertificate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SmimeCertificate.status": %w`, err)}
		}
	}
	return nil
}

func (scu *SmimeCertificateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(smimecertificate.Table, smimecertificate.Columns, sqlgraph.NewFieldSpec(smimecertificate.FieldID, field.TypeInt))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.UpdateTime(); ok {
		_spec.SetField(smimecertificate.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := scu.mutation.TransactionId(); ok {
		_spec.SetField(smimecertificate.FieldTransactionId, field.TypeString, value)
	}
	if scu.mutation.TransactionIdCleared() {
		_spec.ClearField(smimecertificate.FieldTransactionId, field.TypeString)
	}
	if value, ok := scu.mutation.Email(); ok {
		_spec.SetField(smimecertificate.FieldEmail, field.TypeString, value)
	}
	if value, ok := scu.mutation.Serial(); ok {
		_spec.SetField(smimecertificate.FieldSerial, field.TypeString, value)
	}
	if value, ok := scu.mutation.NotBefore(); ok {
		_spec.SetField(smimecertificate.FieldNotBefore, field.TypeTime, value)
	}
	if scu.mutation.NotBeforeCleared() {
		_spec.ClearField(smimecertificate.FieldNotBefore, field.TypeTime)
	}
	if value, ok := scu.mutation.NotAfter(); ok {
		_spec.SetField(smimecertificate.FieldNotAfter, field.TypeTime, value)
	}
	if scu.mutation.NotAfterCleared() {
		_spec.ClearField(smimecertificate.FieldNotAfter, field.TypeTime)
	}
	if value, ok := scu.mutation.Created(); ok {
		_spec.SetField(smimecertificate.FieldCreated, field.TypeTime, value)
	}
	if scu.mutation.CreatedCleared() {
		_spec.ClearField(smimecertificate.FieldCreated, field.TypeTime)
	}
	if value, ok := scu.mutation.Status(); ok {
		_spec.SetField(smimecertificate.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := scu.mutation.Ca(); ok {
		_spec.SetField(smimecertificate.FieldCa, field.TypeString, value)
	}
	if scu.mutation.CaCleared() {
		_spec.ClearField(smimecertificate.FieldCa, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{smimecertificate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// SmimeCertificateUpdateOne is the builder for updating a single SmimeCertificate entity.
type SmimeCertificateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SmimeCertificateMutation
}

// SetUpdateTime sets the "update_time" field.
func (scuo *SmimeCertificateUpdateOne) SetUpdateTime(t time.Time) *SmimeCertificateUpdateOne {
	scuo.mutation.SetUpdateTime(t)
	return scuo
}

// SetTransactionId sets the "transactionId" field.
func (scuo *SmimeCertificateUpdateOne) SetTransactionId(s string) *SmimeCertificateUpdateOne {
	scuo.mutation.SetTransactionId(s)
	return scuo
}

// SetNillableTransactionId sets the "transactionId" field if the given value is not nil.
func (scuo *SmimeCertificateUpdateOne) SetNillableTransactionId(s *string) *SmimeCertificateUpdateOne {
	if s != nil {
		scuo.SetTransactionId(*s)
	}
	return scuo
}

// ClearTransactionId clears the value of the "transactionId" field.
func (scuo *SmimeCertificateUpdateOne) ClearTransactionId() *SmimeCertificateUpdateOne {
	scuo.mutation.ClearTransactionId()
	return scuo
}

// SetEmail sets the "email" field.
func (scuo *SmimeCertificateUpdateOne) SetEmail(s string) *SmimeCertificateUpdateOne {
	scuo.mutation.SetEmail(s)
	return scuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (scuo *SmimeCertificateUpdateOne) SetNillableEmail(s *string) *SmimeCertificateUpdateOne {
	if s != nil {
		scuo.SetEmail(*s)
	}
	return scuo
}

// SetSerial sets the "serial" field.
func (scuo *SmimeCertificateUpdateOne) SetSerial(s string) *SmimeCertificateUpdateOne {
	scuo.mutation.SetSerial(s)
	return scuo
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (scuo *SmimeCertificateUpdateOne) SetNillableSerial(s *string) *SmimeCertificateUpdateOne {
	if s != nil {
		scuo.SetSerial(*s)
	}
	return scuo
}

// SetNotBefore sets the "notBefore" field.
func (scuo *SmimeCertificateUpdateOne) SetNotBefore(t time.Time) *SmimeCertificateUpdateOne {
	scuo.mutation.SetNotBefore(t)
	return scuo
}

// SetNillableNotBefore sets the "notBefore" field if the given value is not nil.
func (scuo *SmimeCertificateUpdateOne) SetNillableNotBefore(t *time.Time) *SmimeCertificateUpdateOne {
	if t != nil {
		scuo.SetNotBefore(*t)
	}
	return scuo
}

// ClearNotBefore clears the value of the "notBefore" field.
func (scuo *SmimeCertificateUpdateOne) ClearNotBefore() *SmimeCertificateUpdateOne {
	scuo.mutation.ClearNotBefore()
	return scuo
}

// SetNotAfter sets the "notAfter" field.
func (scuo *SmimeCertificateUpdateOne) SetNotAfter(t time.Time) *SmimeCertificateUpdateOne {
	scuo.mutation.SetNotAfter(t)
	return scuo
}

// SetNillableNotAfter sets the "notAfter" field if the given value is not nil.
func (scuo *SmimeCertificateUpdateOne) SetNillableNotAfter(t *time.Time) *SmimeCertificateUpdateOne {
	if t != nil {
		scuo.SetNotAfter(*t)
	}
	return scuo
}

// ClearNotAfter clears the value of the "notAfter" field.
func (scuo *SmimeCertificateUpdateOne) ClearNotAfter() *SmimeCertificateUpdateOne {
	scuo.mutation.ClearNotAfter()
	return scuo
}

// SetCreated sets the "created" field.
func (scuo *SmimeCertificateUpdateOne) SetCreated(t time.Time) *SmimeCertificateUpdateOne {
	scuo.mutation.SetCreated(t)
	return scuo
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (scuo *SmimeCertificateUpdateOne) SetNillableCreated(t *time.Time) *SmimeCertificateUpdateOne {
	if t != nil {
		scuo.SetCreated(*t)
	}
	return scuo
}

// ClearCreated clears the value of the "created" field.
func (scuo *SmimeCertificateUpdateOne) ClearCreated() *SmimeCertificateUpdateOne {
	scuo.mutation.ClearCreated()
	return scuo
}

// SetStatus sets the "status" field.
func (scuo *SmimeCertificateUpdateOne) SetStatus(s smimecertificate.Status) *SmimeCertificateUpdateOne {
	scuo.mutation.SetStatus(s)
	return scuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (scuo *SmimeCertificateUpdateOne) SetNillableStatus(s *smimecertificate.Status) *SmimeCertificateUpdateOne {
	if s != nil {
		scuo.SetStatus(*s)
	}
	return scuo
}

// SetCa sets the "ca" field.
func (scuo *SmimeCertificateUpdateOne) SetCa(s string) *SmimeCertificateUpdateOne {
	scuo.mutation.SetCa(s)
	return scuo
}

// SetNillableCa sets the "ca" field if the given value is not nil.
func (scuo *SmimeCertificateUpdateOne) SetNillableCa(s *string) *SmimeCertificateUpdateOne {
	if s != nil {
		scuo.SetCa(*s)
	}
	return scuo
}

// ClearCa clears the value of the "ca" field.
func (scuo *SmimeCertificateUpdateOne) ClearCa() *SmimeCertificateUpdateOne {
	scuo.mutation.ClearCa()
	return scuo
}

// Mutation returns the SmimeCertificateMutation object of the builder.
func (scuo *SmimeCertificateUpdateOne) Mutation() *SmimeCertificateMutation {
	return scuo.mutation
}

// Where appends a list predicates to the SmimeCertificateUpdate builder.
func (scuo *SmimeCertificateUpdateOne) Where(ps ...predicate.SmimeCertificate) *SmimeCertificateUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *SmimeCertificateUpdateOne) Select(field string, fields ...string) *SmimeCertificateUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated SmimeCertificate entity.
func (scuo *SmimeCertificateUpdateOne) Save(ctx context.Context) (*SmimeCertificate, error) {
	if err := scuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *SmimeCertificateUpdateOne) SaveX(ctx context.Context) *SmimeCertificate {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *SmimeCertificateUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *SmimeCertificateUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *SmimeCertificateUpdateOne) defaults() error {
	if _, ok := scuo.mutation.UpdateTime(); !ok {
		if smimecertificate.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized smimecertificate.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := smimecertificate.UpdateDefaultUpdateTime()
		scuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (scuo *SmimeCertificateUpdateOne) check() error {
	if v, ok := scuo.mutation.Email(); ok {
		if err := smimecertificate.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "SmimeCertificate.email": %w`, err)}
		}
	}
	if v, ok := scuo.mutation.Serial(); ok {
		if err := smimecertificate.SerialValidator(v); err != nil {
			return &ValidationError{Name: "serial", err: fmt.Errorf(`ent: validator failed for field "SmimeCertificate.serial": %w`, err)}
		}
	}
	if v, ok := scuo.mutation.Status(); ok {
		if err := smimecertificate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SmimeCertificate.status": %w`, err)}
		}
	}
	return nil
}

func (scuo *SmimeCertificateUpdateOne) sqlSave(ctx context.Context) (_node *SmimeCertificate, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(smimecertificate.Table, smimecertificate.Columns, sqlgraph.NewFieldSpec(smimecertificate.FieldID, field.TypeInt))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SmimeCertificate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, smimecertificate.FieldID)
		for _, f := range fields {
			if !smimecertificate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != smimecertificate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.UpdateTime(); ok {
		_spec.SetField(smimecertificate.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := scuo.mutation.TransactionId(); ok {
		_spec.SetField(smimecertificate.FieldTransactionId, field.TypeString, value)
	}
	if scuo.mutation.TransactionIdCleared() {
		_spec.ClearField(smimecertificate.FieldTransactionId, field.TypeString)
	}
	if value, ok := scuo.mutation.Email(); ok {
		_spec.SetField(smimecertificate.FieldEmail, field.TypeString, value)
	}
	if value, ok := scuo.mutation.Serial(); ok {
		_spec.SetField(smimecertificate.FieldSerial, field.TypeString, value)
	}
	if value, ok := scuo.mutation.NotBefore(); ok {
		_spec.SetField(smimecertificate.FieldNotBefore, field.TypeTime, value)
	}
	if scuo.mutation.NotBeforeCleared() {
		_spec.ClearField(smimecertificate.FieldNotBefore, field.TypeTime)
	}
	if value, ok := scuo.mutation.NotAfter(); ok {
		_spec.SetField(smimecertificate.FieldNotAfter, field.TypeTime, value)
	}
	if scuo.mutation.NotAfterCleared() {
		_spec.ClearField(smimecertificate.FieldNotAfter, field.TypeTime)
	}
	if value, ok := scuo.mutation.Created(); ok {
		_spec.SetField(smimecertificate.FieldCreated, field.TypeTime, value)
	}
	if scuo.mutation.CreatedCleared() {
		_spec.ClearField(smimecertificate.FieldCreated, field.TypeTime)
	}
	if value, ok := scuo.mutation.Status(); ok {
		_spec.SetField(smimecertificate.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := scuo.mutation.Ca(); ok {
		_spec.SetField(smimecertificate.FieldCa, field.TypeString, value)
	}
	if scuo.mutation.CaCleared() {
		_spec.ClearField(smimecertificate.FieldCa, field.TypeString)
	}
	_node = &SmimeCertificate{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{smimecertificate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
