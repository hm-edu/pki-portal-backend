// Code generated by entc, DO NOT EDIT.

package certificate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hm-edu/pki-service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// SslId applies equality check predicate on the "sslId" field. It's identical to SslIdEQ.
func SslId(v int) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSslId), v))
	})
}

// Serial applies equality check predicate on the "serial" field. It's identical to SerialEQ.
func Serial(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSerial), v))
	})
}

// CommonName applies equality check predicate on the "commonName" field. It's identical to CommonNameEQ.
func CommonName(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommonName), v))
	})
}

// NotBefore applies equality check predicate on the "notBefore" field. It's identical to NotBeforeEQ.
func NotBefore(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotBefore), v))
	})
}

// NotAfter applies equality check predicate on the "notAfter" field. It's identical to NotAfterEQ.
func NotAfter(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotAfter), v))
	})
}

// IssuedBy applies equality check predicate on the "issuedBy" field. It's identical to IssuedByEQ.
func IssuedBy(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIssuedBy), v))
	})
}

// Created applies equality check predicate on the "created" field. It's identical to CreatedEQ.
func Created(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreated), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// SslIdEQ applies the EQ predicate on the "sslId" field.
func SslIdEQ(v int) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSslId), v))
	})
}

// SslIdNEQ applies the NEQ predicate on the "sslId" field.
func SslIdNEQ(v int) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSslId), v))
	})
}

// SslIdIn applies the In predicate on the "sslId" field.
func SslIdIn(vs ...int) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSslId), v...))
	})
}

// SslIdNotIn applies the NotIn predicate on the "sslId" field.
func SslIdNotIn(vs ...int) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSslId), v...))
	})
}

// SslIdGT applies the GT predicate on the "sslId" field.
func SslIdGT(v int) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSslId), v))
	})
}

// SslIdGTE applies the GTE predicate on the "sslId" field.
func SslIdGTE(v int) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSslId), v))
	})
}

// SslIdLT applies the LT predicate on the "sslId" field.
func SslIdLT(v int) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSslId), v))
	})
}

// SslIdLTE applies the LTE predicate on the "sslId" field.
func SslIdLTE(v int) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSslId), v))
	})
}

// SslIdIsNil applies the IsNil predicate on the "sslId" field.
func SslIdIsNil() predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSslId)))
	})
}

// SslIdNotNil applies the NotNil predicate on the "sslId" field.
func SslIdNotNil() predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSslId)))
	})
}

// SerialEQ applies the EQ predicate on the "serial" field.
func SerialEQ(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSerial), v))
	})
}

// SerialNEQ applies the NEQ predicate on the "serial" field.
func SerialNEQ(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSerial), v))
	})
}

// SerialIn applies the In predicate on the "serial" field.
func SerialIn(vs ...string) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSerial), v...))
	})
}

// SerialNotIn applies the NotIn predicate on the "serial" field.
func SerialNotIn(vs ...string) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSerial), v...))
	})
}

// SerialGT applies the GT predicate on the "serial" field.
func SerialGT(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSerial), v))
	})
}

// SerialGTE applies the GTE predicate on the "serial" field.
func SerialGTE(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSerial), v))
	})
}

// SerialLT applies the LT predicate on the "serial" field.
func SerialLT(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSerial), v))
	})
}

// SerialLTE applies the LTE predicate on the "serial" field.
func SerialLTE(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSerial), v))
	})
}

// SerialContains applies the Contains predicate on the "serial" field.
func SerialContains(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSerial), v))
	})
}

// SerialHasPrefix applies the HasPrefix predicate on the "serial" field.
func SerialHasPrefix(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSerial), v))
	})
}

// SerialHasSuffix applies the HasSuffix predicate on the "serial" field.
func SerialHasSuffix(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSerial), v))
	})
}

// SerialIsNil applies the IsNil predicate on the "serial" field.
func SerialIsNil() predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSerial)))
	})
}

// SerialNotNil applies the NotNil predicate on the "serial" field.
func SerialNotNil() predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSerial)))
	})
}

// SerialEqualFold applies the EqualFold predicate on the "serial" field.
func SerialEqualFold(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSerial), v))
	})
}

// SerialContainsFold applies the ContainsFold predicate on the "serial" field.
func SerialContainsFold(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSerial), v))
	})
}

// CommonNameEQ applies the EQ predicate on the "commonName" field.
func CommonNameEQ(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommonName), v))
	})
}

// CommonNameNEQ applies the NEQ predicate on the "commonName" field.
func CommonNameNEQ(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCommonName), v))
	})
}

// CommonNameIn applies the In predicate on the "commonName" field.
func CommonNameIn(vs ...string) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCommonName), v...))
	})
}

// CommonNameNotIn applies the NotIn predicate on the "commonName" field.
func CommonNameNotIn(vs ...string) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCommonName), v...))
	})
}

// CommonNameGT applies the GT predicate on the "commonName" field.
func CommonNameGT(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCommonName), v))
	})
}

// CommonNameGTE applies the GTE predicate on the "commonName" field.
func CommonNameGTE(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCommonName), v))
	})
}

// CommonNameLT applies the LT predicate on the "commonName" field.
func CommonNameLT(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCommonName), v))
	})
}

// CommonNameLTE applies the LTE predicate on the "commonName" field.
func CommonNameLTE(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCommonName), v))
	})
}

// CommonNameContains applies the Contains predicate on the "commonName" field.
func CommonNameContains(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCommonName), v))
	})
}

// CommonNameHasPrefix applies the HasPrefix predicate on the "commonName" field.
func CommonNameHasPrefix(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCommonName), v))
	})
}

// CommonNameHasSuffix applies the HasSuffix predicate on the "commonName" field.
func CommonNameHasSuffix(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCommonName), v))
	})
}

// CommonNameEqualFold applies the EqualFold predicate on the "commonName" field.
func CommonNameEqualFold(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCommonName), v))
	})
}

// CommonNameContainsFold applies the ContainsFold predicate on the "commonName" field.
func CommonNameContainsFold(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCommonName), v))
	})
}

// NotBeforeEQ applies the EQ predicate on the "notBefore" field.
func NotBeforeEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotBefore), v))
	})
}

// NotBeforeNEQ applies the NEQ predicate on the "notBefore" field.
func NotBeforeNEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNotBefore), v))
	})
}

// NotBeforeIn applies the In predicate on the "notBefore" field.
func NotBeforeIn(vs ...time.Time) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNotBefore), v...))
	})
}

// NotBeforeNotIn applies the NotIn predicate on the "notBefore" field.
func NotBeforeNotIn(vs ...time.Time) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNotBefore), v...))
	})
}

// NotBeforeGT applies the GT predicate on the "notBefore" field.
func NotBeforeGT(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNotBefore), v))
	})
}

// NotBeforeGTE applies the GTE predicate on the "notBefore" field.
func NotBeforeGTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNotBefore), v))
	})
}

// NotBeforeLT applies the LT predicate on the "notBefore" field.
func NotBeforeLT(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNotBefore), v))
	})
}

// NotBeforeLTE applies the LTE predicate on the "notBefore" field.
func NotBeforeLTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNotBefore), v))
	})
}

// NotBeforeIsNil applies the IsNil predicate on the "notBefore" field.
func NotBeforeIsNil() predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNotBefore)))
	})
}

// NotBeforeNotNil applies the NotNil predicate on the "notBefore" field.
func NotBeforeNotNil() predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNotBefore)))
	})
}

// NotAfterEQ applies the EQ predicate on the "notAfter" field.
func NotAfterEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotAfter), v))
	})
}

// NotAfterNEQ applies the NEQ predicate on the "notAfter" field.
func NotAfterNEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNotAfter), v))
	})
}

// NotAfterIn applies the In predicate on the "notAfter" field.
func NotAfterIn(vs ...time.Time) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNotAfter), v...))
	})
}

// NotAfterNotIn applies the NotIn predicate on the "notAfter" field.
func NotAfterNotIn(vs ...time.Time) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNotAfter), v...))
	})
}

// NotAfterGT applies the GT predicate on the "notAfter" field.
func NotAfterGT(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNotAfter), v))
	})
}

// NotAfterGTE applies the GTE predicate on the "notAfter" field.
func NotAfterGTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNotAfter), v))
	})
}

// NotAfterLT applies the LT predicate on the "notAfter" field.
func NotAfterLT(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNotAfter), v))
	})
}

// NotAfterLTE applies the LTE predicate on the "notAfter" field.
func NotAfterLTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNotAfter), v))
	})
}

// NotAfterIsNil applies the IsNil predicate on the "notAfter" field.
func NotAfterIsNil() predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNotAfter)))
	})
}

// NotAfterNotNil applies the NotNil predicate on the "notAfter" field.
func NotAfterNotNil() predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNotAfter)))
	})
}

// IssuedByEQ applies the EQ predicate on the "issuedBy" field.
func IssuedByEQ(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIssuedBy), v))
	})
}

// IssuedByNEQ applies the NEQ predicate on the "issuedBy" field.
func IssuedByNEQ(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIssuedBy), v))
	})
}

// IssuedByIn applies the In predicate on the "issuedBy" field.
func IssuedByIn(vs ...string) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIssuedBy), v...))
	})
}

// IssuedByNotIn applies the NotIn predicate on the "issuedBy" field.
func IssuedByNotIn(vs ...string) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIssuedBy), v...))
	})
}

// IssuedByGT applies the GT predicate on the "issuedBy" field.
func IssuedByGT(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIssuedBy), v))
	})
}

// IssuedByGTE applies the GTE predicate on the "issuedBy" field.
func IssuedByGTE(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIssuedBy), v))
	})
}

// IssuedByLT applies the LT predicate on the "issuedBy" field.
func IssuedByLT(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIssuedBy), v))
	})
}

// IssuedByLTE applies the LTE predicate on the "issuedBy" field.
func IssuedByLTE(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIssuedBy), v))
	})
}

// IssuedByContains applies the Contains predicate on the "issuedBy" field.
func IssuedByContains(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIssuedBy), v))
	})
}

// IssuedByHasPrefix applies the HasPrefix predicate on the "issuedBy" field.
func IssuedByHasPrefix(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIssuedBy), v))
	})
}

// IssuedByHasSuffix applies the HasSuffix predicate on the "issuedBy" field.
func IssuedByHasSuffix(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIssuedBy), v))
	})
}

// IssuedByEqualFold applies the EqualFold predicate on the "issuedBy" field.
func IssuedByEqualFold(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIssuedBy), v))
	})
}

// IssuedByContainsFold applies the ContainsFold predicate on the "issuedBy" field.
func IssuedByContainsFold(v string) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIssuedBy), v))
	})
}

// CreatedEQ applies the EQ predicate on the "created" field.
func CreatedEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreated), v))
	})
}

// CreatedNEQ applies the NEQ predicate on the "created" field.
func CreatedNEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreated), v))
	})
}

// CreatedIn applies the In predicate on the "created" field.
func CreatedIn(vs ...time.Time) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreated), v...))
	})
}

// CreatedNotIn applies the NotIn predicate on the "created" field.
func CreatedNotIn(vs ...time.Time) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreated), v...))
	})
}

// CreatedGT applies the GT predicate on the "created" field.
func CreatedGT(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreated), v))
	})
}

// CreatedGTE applies the GTE predicate on the "created" field.
func CreatedGTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreated), v))
	})
}

// CreatedLT applies the LT predicate on the "created" field.
func CreatedLT(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreated), v))
	})
}

// CreatedLTE applies the LTE predicate on the "created" field.
func CreatedLTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreated), v))
	})
}

// CreatedIsNil applies the IsNil predicate on the "created" field.
func CreatedIsNil() predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreated)))
	})
}

// CreatedNotNil applies the NotNil predicate on the "created" field.
func CreatedNotNil() predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreated)))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Certificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// HasDomains applies the HasEdge predicate on the "domains" edge.
func HasDomains() predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DomainsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DomainsTable, DomainsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDomainsWith applies the HasEdge predicate on the "domains" edge with a given conditions (other predicates).
func HasDomainsWith(preds ...predicate.Domain) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DomainsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DomainsTable, DomainsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Certificate) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Certificate) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Certificate) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		p(s.Not())
	})
}
