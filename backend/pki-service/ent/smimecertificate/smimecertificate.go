// Code generated by ent, DO NOT EDIT.

package smimecertificate

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the smimecertificate type in the database.
	Label = "smime_certificate"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldTransactionId holds the string denoting the transactionid field in the database.
	FieldTransactionId = "transaction_id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldSerial holds the string denoting the serial field in the database.
	FieldSerial = "serial"
	// FieldNotBefore holds the string denoting the notbefore field in the database.
	FieldNotBefore = "not_before"
	// FieldNotAfter holds the string denoting the notafter field in the database.
	FieldNotAfter = "not_after"
	// FieldCreated holds the string denoting the created field in the database.
	FieldCreated = "created"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCa holds the string denoting the ca field in the database.
	FieldCa = "ca"
	// Table holds the table name of the smimecertificate in the database.
	Table = "smime_certificates"
)

// Columns holds all SQL columns for smimecertificate fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldTransactionId,
	FieldEmail,
	FieldSerial,
	FieldNotBefore,
	FieldNotAfter,
	FieldCreated,
	FieldStatus,
	FieldCa,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/hm-edu/pki-service/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// SerialValidator is a validator for the "serial" field. It is called by the builders before save.
	SerialValidator func(string) error
)

// Status defines the type for the "status" enum field.
type Status string

// StatusInvalid is the default value of the Status enum.
const DefaultStatus = StatusInvalid

// Status values.
const (
	StatusInvalid    Status = "Invalid"
	StatusRequested  Status = "Requested"
	StatusApproved   Status = "Approved"
	StatusDeclined   Status = "Declined"
	StatusApplied    Status = "Applied"
	StatusIssued     Status = "Issued"
	StatusRevoked    Status = "Revoked"
	StatusExpired    Status = "Expired"
	StatusReplaced   Status = "Replaced"
	StatusRejected   Status = "Rejected"
	StatusUnmanaged  Status = "Unmanaged"
	StatusSAApproved Status = "SAApproved"
	StatusInit       Status = "Init"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusInvalid, StatusRequested, StatusApproved, StatusDeclined, StatusApplied, StatusIssued, StatusRevoked, StatusExpired, StatusReplaced, StatusRejected, StatusUnmanaged, StatusSAApproved, StatusInit:
		return nil
	default:
		return fmt.Errorf("smimecertificate: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the SmimeCertificate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByTransactionId orders the results by the transactionId field.
func ByTransactionId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransactionId, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// BySerial orders the results by the serial field.
func BySerial(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSerial, opts...).ToFunc()
}

// ByNotBefore orders the results by the notBefore field.
func ByNotBefore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotBefore, opts...).ToFunc()
}

// ByNotAfter orders the results by the notAfter field.
func ByNotAfter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotAfter, opts...).ToFunc()
}

// ByCreated orders the results by the created field.
func ByCreated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreated, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCa orders the results by the ca field.
func ByCa(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCa, opts...).ToFunc()
}
