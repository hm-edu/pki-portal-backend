// Code generated by ent, DO NOT EDIT.

package smimecertificate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/hm-edu/pki-service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldUpdateTime, v))
}

// TransactionId applies equality check predicate on the "transactionId" field. It's identical to TransactionIdEQ.
func TransactionId(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldTransactionId, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldEmail, v))
}

// Serial applies equality check predicate on the "serial" field. It's identical to SerialEQ.
func Serial(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldSerial, v))
}

// NotBefore applies equality check predicate on the "notBefore" field. It's identical to NotBeforeEQ.
func NotBefore(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldNotBefore, v))
}

// NotAfter applies equality check predicate on the "notAfter" field. It's identical to NotAfterEQ.
func NotAfter(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldNotAfter, v))
}

// Created applies equality check predicate on the "created" field. It's identical to CreatedEQ.
func Created(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldCreated, v))
}

// Ca applies equality check predicate on the "ca" field. It's identical to CaEQ.
func Ca(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldCa, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLTE(FieldUpdateTime, v))
}

// TransactionIdEQ applies the EQ predicate on the "transactionId" field.
func TransactionIdEQ(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldTransactionId, v))
}

// TransactionIdNEQ applies the NEQ predicate on the "transactionId" field.
func TransactionIdNEQ(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNEQ(FieldTransactionId, v))
}

// TransactionIdIn applies the In predicate on the "transactionId" field.
func TransactionIdIn(vs ...string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldIn(FieldTransactionId, vs...))
}

// TransactionIdNotIn applies the NotIn predicate on the "transactionId" field.
func TransactionIdNotIn(vs ...string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNotIn(FieldTransactionId, vs...))
}

// TransactionIdGT applies the GT predicate on the "transactionId" field.
func TransactionIdGT(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGT(FieldTransactionId, v))
}

// TransactionIdGTE applies the GTE predicate on the "transactionId" field.
func TransactionIdGTE(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGTE(FieldTransactionId, v))
}

// TransactionIdLT applies the LT predicate on the "transactionId" field.
func TransactionIdLT(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLT(FieldTransactionId, v))
}

// TransactionIdLTE applies the LTE predicate on the "transactionId" field.
func TransactionIdLTE(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLTE(FieldTransactionId, v))
}

// TransactionIdContains applies the Contains predicate on the "transactionId" field.
func TransactionIdContains(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldContains(FieldTransactionId, v))
}

// TransactionIdHasPrefix applies the HasPrefix predicate on the "transactionId" field.
func TransactionIdHasPrefix(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldHasPrefix(FieldTransactionId, v))
}

// TransactionIdHasSuffix applies the HasSuffix predicate on the "transactionId" field.
func TransactionIdHasSuffix(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldHasSuffix(FieldTransactionId, v))
}

// TransactionIdIsNil applies the IsNil predicate on the "transactionId" field.
func TransactionIdIsNil() predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldIsNull(FieldTransactionId))
}

// TransactionIdNotNil applies the NotNil predicate on the "transactionId" field.
func TransactionIdNotNil() predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNotNull(FieldTransactionId))
}

// TransactionIdEqualFold applies the EqualFold predicate on the "transactionId" field.
func TransactionIdEqualFold(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEqualFold(FieldTransactionId, v))
}

// TransactionIdContainsFold applies the ContainsFold predicate on the "transactionId" field.
func TransactionIdContainsFold(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldContainsFold(FieldTransactionId, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldContainsFold(FieldEmail, v))
}

// SerialEQ applies the EQ predicate on the "serial" field.
func SerialEQ(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldSerial, v))
}

// SerialNEQ applies the NEQ predicate on the "serial" field.
func SerialNEQ(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNEQ(FieldSerial, v))
}

// SerialIn applies the In predicate on the "serial" field.
func SerialIn(vs ...string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldIn(FieldSerial, vs...))
}

// SerialNotIn applies the NotIn predicate on the "serial" field.
func SerialNotIn(vs ...string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNotIn(FieldSerial, vs...))
}

// SerialGT applies the GT predicate on the "serial" field.
func SerialGT(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGT(FieldSerial, v))
}

// SerialGTE applies the GTE predicate on the "serial" field.
func SerialGTE(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGTE(FieldSerial, v))
}

// SerialLT applies the LT predicate on the "serial" field.
func SerialLT(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLT(FieldSerial, v))
}

// SerialLTE applies the LTE predicate on the "serial" field.
func SerialLTE(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLTE(FieldSerial, v))
}

// SerialContains applies the Contains predicate on the "serial" field.
func SerialContains(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldContains(FieldSerial, v))
}

// SerialHasPrefix applies the HasPrefix predicate on the "serial" field.
func SerialHasPrefix(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldHasPrefix(FieldSerial, v))
}

// SerialHasSuffix applies the HasSuffix predicate on the "serial" field.
func SerialHasSuffix(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldHasSuffix(FieldSerial, v))
}

// SerialEqualFold applies the EqualFold predicate on the "serial" field.
func SerialEqualFold(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEqualFold(FieldSerial, v))
}

// SerialContainsFold applies the ContainsFold predicate on the "serial" field.
func SerialContainsFold(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldContainsFold(FieldSerial, v))
}

// NotBeforeEQ applies the EQ predicate on the "notBefore" field.
func NotBeforeEQ(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldNotBefore, v))
}

// NotBeforeNEQ applies the NEQ predicate on the "notBefore" field.
func NotBeforeNEQ(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNEQ(FieldNotBefore, v))
}

// NotBeforeIn applies the In predicate on the "notBefore" field.
func NotBeforeIn(vs ...time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldIn(FieldNotBefore, vs...))
}

// NotBeforeNotIn applies the NotIn predicate on the "notBefore" field.
func NotBeforeNotIn(vs ...time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNotIn(FieldNotBefore, vs...))
}

// NotBeforeGT applies the GT predicate on the "notBefore" field.
func NotBeforeGT(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGT(FieldNotBefore, v))
}

// NotBeforeGTE applies the GTE predicate on the "notBefore" field.
func NotBeforeGTE(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGTE(FieldNotBefore, v))
}

// NotBeforeLT applies the LT predicate on the "notBefore" field.
func NotBeforeLT(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLT(FieldNotBefore, v))
}

// NotBeforeLTE applies the LTE predicate on the "notBefore" field.
func NotBeforeLTE(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLTE(FieldNotBefore, v))
}

// NotBeforeIsNil applies the IsNil predicate on the "notBefore" field.
func NotBeforeIsNil() predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldIsNull(FieldNotBefore))
}

// NotBeforeNotNil applies the NotNil predicate on the "notBefore" field.
func NotBeforeNotNil() predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNotNull(FieldNotBefore))
}

// NotAfterEQ applies the EQ predicate on the "notAfter" field.
func NotAfterEQ(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldNotAfter, v))
}

// NotAfterNEQ applies the NEQ predicate on the "notAfter" field.
func NotAfterNEQ(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNEQ(FieldNotAfter, v))
}

// NotAfterIn applies the In predicate on the "notAfter" field.
func NotAfterIn(vs ...time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldIn(FieldNotAfter, vs...))
}

// NotAfterNotIn applies the NotIn predicate on the "notAfter" field.
func NotAfterNotIn(vs ...time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNotIn(FieldNotAfter, vs...))
}

// NotAfterGT applies the GT predicate on the "notAfter" field.
func NotAfterGT(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGT(FieldNotAfter, v))
}

// NotAfterGTE applies the GTE predicate on the "notAfter" field.
func NotAfterGTE(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGTE(FieldNotAfter, v))
}

// NotAfterLT applies the LT predicate on the "notAfter" field.
func NotAfterLT(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLT(FieldNotAfter, v))
}

// NotAfterLTE applies the LTE predicate on the "notAfter" field.
func NotAfterLTE(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLTE(FieldNotAfter, v))
}

// NotAfterIsNil applies the IsNil predicate on the "notAfter" field.
func NotAfterIsNil() predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldIsNull(FieldNotAfter))
}

// NotAfterNotNil applies the NotNil predicate on the "notAfter" field.
func NotAfterNotNil() predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNotNull(FieldNotAfter))
}

// CreatedEQ applies the EQ predicate on the "created" field.
func CreatedEQ(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldCreated, v))
}

// CreatedNEQ applies the NEQ predicate on the "created" field.
func CreatedNEQ(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNEQ(FieldCreated, v))
}

// CreatedIn applies the In predicate on the "created" field.
func CreatedIn(vs ...time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldIn(FieldCreated, vs...))
}

// CreatedNotIn applies the NotIn predicate on the "created" field.
func CreatedNotIn(vs ...time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNotIn(FieldCreated, vs...))
}

// CreatedGT applies the GT predicate on the "created" field.
func CreatedGT(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGT(FieldCreated, v))
}

// CreatedGTE applies the GTE predicate on the "created" field.
func CreatedGTE(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGTE(FieldCreated, v))
}

// CreatedLT applies the LT predicate on the "created" field.
func CreatedLT(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLT(FieldCreated, v))
}

// CreatedLTE applies the LTE predicate on the "created" field.
func CreatedLTE(v time.Time) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLTE(FieldCreated, v))
}

// CreatedIsNil applies the IsNil predicate on the "created" field.
func CreatedIsNil() predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldIsNull(FieldCreated))
}

// CreatedNotNil applies the NotNil predicate on the "created" field.
func CreatedNotNil() predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNotNull(FieldCreated))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNotIn(FieldStatus, vs...))
}

// CaEQ applies the EQ predicate on the "ca" field.
func CaEQ(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEQ(FieldCa, v))
}

// CaNEQ applies the NEQ predicate on the "ca" field.
func CaNEQ(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNEQ(FieldCa, v))
}

// CaIn applies the In predicate on the "ca" field.
func CaIn(vs ...string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldIn(FieldCa, vs...))
}

// CaNotIn applies the NotIn predicate on the "ca" field.
func CaNotIn(vs ...string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNotIn(FieldCa, vs...))
}

// CaGT applies the GT predicate on the "ca" field.
func CaGT(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGT(FieldCa, v))
}

// CaGTE applies the GTE predicate on the "ca" field.
func CaGTE(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldGTE(FieldCa, v))
}

// CaLT applies the LT predicate on the "ca" field.
func CaLT(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLT(FieldCa, v))
}

// CaLTE applies the LTE predicate on the "ca" field.
func CaLTE(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldLTE(FieldCa, v))
}

// CaContains applies the Contains predicate on the "ca" field.
func CaContains(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldContains(FieldCa, v))
}

// CaHasPrefix applies the HasPrefix predicate on the "ca" field.
func CaHasPrefix(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldHasPrefix(FieldCa, v))
}

// CaHasSuffix applies the HasSuffix predicate on the "ca" field.
func CaHasSuffix(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldHasSuffix(FieldCa, v))
}

// CaIsNil applies the IsNil predicate on the "ca" field.
func CaIsNil() predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldIsNull(FieldCa))
}

// CaNotNil applies the NotNil predicate on the "ca" field.
func CaNotNil() predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldNotNull(FieldCa))
}

// CaEqualFold applies the EqualFold predicate on the "ca" field.
func CaEqualFold(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldEqualFold(FieldCa, v))
}

// CaContainsFold applies the ContainsFold predicate on the "ca" field.
func CaContainsFold(v string) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.FieldContainsFold(FieldCa, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SmimeCertificate) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SmimeCertificate) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SmimeCertificate) predicate.SmimeCertificate {
	return predicate.SmimeCertificate(sql.NotPredicates(p))
}
