// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hm-edu/domain-rest-interface/ent/delegation"
	"github.com/hm-edu/domain-rest-interface/ent/domain"
)

// DelegationCreate is the builder for creating a Delegation entity.
type DelegationCreate struct {
	config
	mutation *DelegationMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (dc *DelegationCreate) SetCreateTime(t time.Time) *DelegationCreate {
	dc.mutation.SetCreateTime(t)
	return dc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (dc *DelegationCreate) SetNillableCreateTime(t *time.Time) *DelegationCreate {
	if t != nil {
		dc.SetCreateTime(*t)
	}
	return dc
}

// SetUpdateTime sets the "update_time" field.
func (dc *DelegationCreate) SetUpdateTime(t time.Time) *DelegationCreate {
	dc.mutation.SetUpdateTime(t)
	return dc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (dc *DelegationCreate) SetNillableUpdateTime(t *time.Time) *DelegationCreate {
	if t != nil {
		dc.SetUpdateTime(*t)
	}
	return dc
}

// SetUser sets the "user" field.
func (dc *DelegationCreate) SetUser(s string) *DelegationCreate {
	dc.mutation.SetUser(s)
	return dc
}

// SetDomainID sets the "domain" edge to the Domain entity by ID.
func (dc *DelegationCreate) SetDomainID(id int) *DelegationCreate {
	dc.mutation.SetDomainID(id)
	return dc
}

// SetDomain sets the "domain" edge to the Domain entity.
func (dc *DelegationCreate) SetDomain(d *Domain) *DelegationCreate {
	return dc.SetDomainID(d.ID)
}

// Mutation returns the DelegationMutation object of the builder.
func (dc *DelegationCreate) Mutation() *DelegationMutation {
	return dc.mutation
}

// Save creates the Delegation in the database.
func (dc *DelegationCreate) Save(ctx context.Context) (*Delegation, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DelegationCreate) SaveX(ctx context.Context) *Delegation {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DelegationCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DelegationCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DelegationCreate) defaults() {
	if _, ok := dc.mutation.CreateTime(); !ok {
		v := delegation.DefaultCreateTime()
		dc.mutation.SetCreateTime(v)
	}
	if _, ok := dc.mutation.UpdateTime(); !ok {
		v := delegation.DefaultUpdateTime()
		dc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DelegationCreate) check() error {
	if _, ok := dc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Delegation.create_time"`)}
	}
	if _, ok := dc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Delegation.update_time"`)}
	}
	if _, ok := dc.mutation.User(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required field "Delegation.user"`)}
	}
	if v, ok := dc.mutation.User(); ok {
		if err := delegation.UserValidator(v); err != nil {
			return &ValidationError{Name: "user", err: fmt.Errorf(`ent: validator failed for field "Delegation.user": %w`, err)}
		}
	}
	if len(dc.mutation.DomainIDs()) == 0 {
		return &ValidationError{Name: "domain", err: errors.New(`ent: missing required edge "Delegation.domain"`)}
	}
	return nil
}

func (dc *DelegationCreate) sqlSave(ctx context.Context) (*Delegation, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DelegationCreate) createSpec() (*Delegation, *sqlgraph.CreateSpec) {
	var (
		_node = &Delegation{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(delegation.Table, sqlgraph.NewFieldSpec(delegation.FieldID, field.TypeInt))
	)
	if value, ok := dc.mutation.CreateTime(); ok {
		_spec.SetField(delegation.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := dc.mutation.UpdateTime(); ok {
		_spec.SetField(delegation.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := dc.mutation.User(); ok {
		_spec.SetField(delegation.FieldUser, field.TypeString, value)
		_node.User = value
	}
	if nodes := dc.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   delegation.DomainTable,
			Columns: []string{delegation.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.domain_delegations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DelegationCreateBulk is the builder for creating many Delegation entities in bulk.
type DelegationCreateBulk struct {
	config
	err      error
	builders []*DelegationCreate
}

// Save creates the Delegation entities in the database.
func (dcb *DelegationCreateBulk) Save(ctx context.Context) ([]*Delegation, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Delegation, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DelegationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DelegationCreateBulk) SaveX(ctx context.Context) []*Delegation {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DelegationCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DelegationCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
