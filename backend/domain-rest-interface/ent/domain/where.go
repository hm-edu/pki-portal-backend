// Code generated by ent, DO NOT EDIT.

package domain

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hm-edu/domain-rest-interface/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldUpdateTime, v))
}

// Fqdn applies equality check predicate on the "fqdn" field. It's identical to FqdnEQ.
func Fqdn(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldFqdn, v))
}

// Owner applies equality check predicate on the "owner" field. It's identical to OwnerEQ.
func Owner(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldOwner, v))
}

// Approved applies equality check predicate on the "approved" field. It's identical to ApprovedEQ.
func Approved(v bool) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldApproved, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldUpdateTime, v))
}

// FqdnEQ applies the EQ predicate on the "fqdn" field.
func FqdnEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldFqdn, v))
}

// FqdnNEQ applies the NEQ predicate on the "fqdn" field.
func FqdnNEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldFqdn, v))
}

// FqdnIn applies the In predicate on the "fqdn" field.
func FqdnIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldFqdn, vs...))
}

// FqdnNotIn applies the NotIn predicate on the "fqdn" field.
func FqdnNotIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldFqdn, vs...))
}

// FqdnGT applies the GT predicate on the "fqdn" field.
func FqdnGT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldFqdn, v))
}

// FqdnGTE applies the GTE predicate on the "fqdn" field.
func FqdnGTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldFqdn, v))
}

// FqdnLT applies the LT predicate on the "fqdn" field.
func FqdnLT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldFqdn, v))
}

// FqdnLTE applies the LTE predicate on the "fqdn" field.
func FqdnLTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldFqdn, v))
}

// FqdnContains applies the Contains predicate on the "fqdn" field.
func FqdnContains(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContains(FieldFqdn, v))
}

// FqdnHasPrefix applies the HasPrefix predicate on the "fqdn" field.
func FqdnHasPrefix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasPrefix(FieldFqdn, v))
}

// FqdnHasSuffix applies the HasSuffix predicate on the "fqdn" field.
func FqdnHasSuffix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasSuffix(FieldFqdn, v))
}

// FqdnEqualFold applies the EqualFold predicate on the "fqdn" field.
func FqdnEqualFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldFqdn, v))
}

// FqdnContainsFold applies the ContainsFold predicate on the "fqdn" field.
func FqdnContainsFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldFqdn, v))
}

// OwnerEQ applies the EQ predicate on the "owner" field.
func OwnerEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldOwner, v))
}

// OwnerNEQ applies the NEQ predicate on the "owner" field.
func OwnerNEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldOwner, v))
}

// OwnerIn applies the In predicate on the "owner" field.
func OwnerIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldOwner, vs...))
}

// OwnerNotIn applies the NotIn predicate on the "owner" field.
func OwnerNotIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldOwner, vs...))
}

// OwnerGT applies the GT predicate on the "owner" field.
func OwnerGT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldOwner, v))
}

// OwnerGTE applies the GTE predicate on the "owner" field.
func OwnerGTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldOwner, v))
}

// OwnerLT applies the LT predicate on the "owner" field.
func OwnerLT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldOwner, v))
}

// OwnerLTE applies the LTE predicate on the "owner" field.
func OwnerLTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldOwner, v))
}

// OwnerContains applies the Contains predicate on the "owner" field.
func OwnerContains(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContains(FieldOwner, v))
}

// OwnerHasPrefix applies the HasPrefix predicate on the "owner" field.
func OwnerHasPrefix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasPrefix(FieldOwner, v))
}

// OwnerHasSuffix applies the HasSuffix predicate on the "owner" field.
func OwnerHasSuffix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasSuffix(FieldOwner, v))
}

// OwnerEqualFold applies the EqualFold predicate on the "owner" field.
func OwnerEqualFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldOwner, v))
}

// OwnerContainsFold applies the ContainsFold predicate on the "owner" field.
func OwnerContainsFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldOwner, v))
}

// ApprovedEQ applies the EQ predicate on the "approved" field.
func ApprovedEQ(v bool) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldApproved, v))
}

// ApprovedNEQ applies the NEQ predicate on the "approved" field.
func ApprovedNEQ(v bool) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldApproved, v))
}

// HasDelegations applies the HasEdge predicate on the "delegations" edge.
func HasDelegations() predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DelegationsTable, DelegationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDelegationsWith applies the HasEdge predicate on the "delegations" edge with a given conditions (other predicates).
func HasDelegationsWith(preds ...predicate.Delegation) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := newDelegationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Domain) predicate.Domain {
	return predicate.Domain(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Domain) predicate.Domain {
	return predicate.Domain(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Domain) predicate.Domain {
	return predicate.Domain(sql.NotPredicates(p))
}
