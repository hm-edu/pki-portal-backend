// Code generated by ent, DO NOT EDIT.

package domain

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the domain type in the database.
	Label = "domain"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldFqdn holds the string denoting the fqdn field in the database.
	FieldFqdn = "fqdn"
	// FieldOwner holds the string denoting the owner field in the database.
	FieldOwner = "owner"
	// FieldApproved holds the string denoting the approved field in the database.
	FieldApproved = "approved"
	// EdgeDelegations holds the string denoting the delegations edge name in mutations.
	EdgeDelegations = "delegations"
	// Table holds the table name of the domain in the database.
	Table = "domains"
	// DelegationsTable is the table that holds the delegations relation/edge.
	DelegationsTable = "delegations"
	// DelegationsInverseTable is the table name for the Delegation entity.
	// It exists in this package in order to avoid circular dependency with the "delegation" package.
	DelegationsInverseTable = "delegations"
	// DelegationsColumn is the table column denoting the delegations relation/edge.
	DelegationsColumn = "domain_delegations"
)

// Columns holds all SQL columns for domain fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldFqdn,
	FieldOwner,
	FieldApproved,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// FqdnValidator is a validator for the "fqdn" field. It is called by the builders before save.
	FqdnValidator func(string) error
	// OwnerValidator is a validator for the "owner" field. It is called by the builders before save.
	OwnerValidator func(string) error
	// DefaultApproved holds the default value on creation for the "approved" field.
	DefaultApproved bool
)

// OrderOption defines the ordering options for the Domain queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByFqdn orders the results by the fqdn field.
func ByFqdn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFqdn, opts...).ToFunc()
}

// ByOwner orders the results by the owner field.
func ByOwner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwner, opts...).ToFunc()
}

// ByApproved orders the results by the approved field.
func ByApproved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproved, opts...).ToFunc()
}

// ByDelegationsCount orders the results by delegations count.
func ByDelegationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDelegationsStep(), opts...)
	}
}

// ByDelegations orders the results by delegations terms.
func ByDelegations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDelegationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDelegationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DelegationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DelegationsTable, DelegationsColumn),
	)
}
