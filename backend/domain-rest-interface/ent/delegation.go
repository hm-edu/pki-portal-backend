// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/hm-edu/domain-rest-interface/ent/delegation"
	"github.com/hm-edu/domain-rest-interface/ent/domain"
)

// Delegation is the model entity for the Delegation schema.
type Delegation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// User holds the value of the "user" field.
	User string `json:"user,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DelegationQuery when eager-loading is set.
	Edges              DelegationEdges `json:"edges"`
	domain_delegations *int
}

// DelegationEdges holds the relations/edges for other nodes in the graph.
type DelegationEdges struct {
	// Domain holds the value of the domain edge.
	Domain *Domain `json:"domain,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DomainOrErr returns the Domain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DelegationEdges) DomainOrErr() (*Domain, error) {
	if e.loadedTypes[0] {
		if e.Domain == nil {
			// The edge domain was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: domain.Label}
		}
		return e.Domain, nil
	}
	return nil, &NotLoadedError{edge: "domain"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Delegation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case delegation.FieldID:
			values[i] = new(sql.NullInt64)
		case delegation.FieldUser:
			values[i] = new(sql.NullString)
		case delegation.FieldCreateTime, delegation.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case delegation.ForeignKeys[0]: // domain_delegations
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Delegation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Delegation fields.
func (d *Delegation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case delegation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case delegation.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				d.CreateTime = value.Time
			}
		case delegation.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				d.UpdateTime = value.Time
			}
		case delegation.FieldUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user", values[i])
			} else if value.Valid {
				d.User = value.String
			}
		case delegation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field domain_delegations", value)
			} else if value.Valid {
				d.domain_delegations = new(int)
				*d.domain_delegations = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDomain queries the "domain" edge of the Delegation entity.
func (d *Delegation) QueryDomain() *DomainQuery {
	return (&DelegationClient{config: d.config}).QueryDomain(d)
}

// Update returns a builder for updating this Delegation.
// Note that you need to call Delegation.Unwrap() before calling this method if this Delegation
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Delegation) Update() *DelegationUpdateOne {
	return (&DelegationClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Delegation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Delegation) Unwrap() *Delegation {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Delegation is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Delegation) String() string {
	var builder strings.Builder
	builder.WriteString("Delegation(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(d.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(d.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", user=")
	builder.WriteString(d.User)
	builder.WriteByte(')')
	return builder.String()
}

// Delegations is a parsable slice of Delegation.
type Delegations []*Delegation

func (d Delegations) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
