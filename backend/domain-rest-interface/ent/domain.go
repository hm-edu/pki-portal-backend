// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/hm-edu/domain-rest-interface/ent/domain"
)

// Domain is the model entity for the Domain schema.
type Domain struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Fqdn holds the value of the "fqdn" field.
	Fqdn string `json:"fqdn,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner string `json:"owner,omitempty"`
	// Approved holds the value of the "approved" field.
	Approved bool `json:"approved,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DomainQuery when eager-loading is set.
	Edges        DomainEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DomainEdges holds the relations/edges for other nodes in the graph.
type DomainEdges struct {
	// Delegations holds the value of the delegations edge.
	Delegations []*Delegation `json:"delegations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DelegationsOrErr returns the Delegations value or an error if the edge
// was not loaded in eager-loading.
func (e DomainEdges) DelegationsOrErr() ([]*Delegation, error) {
	if e.loadedTypes[0] {
		return e.Delegations, nil
	}
	return nil, &NotLoadedError{edge: "delegations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Domain) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case domain.FieldApproved:
			values[i] = new(sql.NullBool)
		case domain.FieldID:
			values[i] = new(sql.NullInt64)
		case domain.FieldFqdn, domain.FieldOwner:
			values[i] = new(sql.NullString)
		case domain.FieldCreateTime, domain.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Domain fields.
func (d *Domain) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case domain.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case domain.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				d.CreateTime = value.Time
			}
		case domain.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				d.UpdateTime = value.Time
			}
		case domain.FieldFqdn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fqdn", values[i])
			} else if value.Valid {
				d.Fqdn = value.String
			}
		case domain.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				d.Owner = value.String
			}
		case domain.FieldApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field approved", values[i])
			} else if value.Valid {
				d.Approved = value.Bool
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Domain.
// This includes values selected through modifiers, order, etc.
func (d *Domain) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryDelegations queries the "delegations" edge of the Domain entity.
func (d *Domain) QueryDelegations() *DelegationQuery {
	return NewDomainClient(d.config).QueryDelegations(d)
}

// Update returns a builder for updating this Domain.
// Note that you need to call Domain.Unwrap() before calling this method if this Domain
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Domain) Update() *DomainUpdateOne {
	return NewDomainClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Domain entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Domain) Unwrap() *Domain {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Domain is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Domain) String() string {
	var builder strings.Builder
	builder.WriteString("Domain(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("create_time=")
	builder.WriteString(d.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(d.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("fqdn=")
	builder.WriteString(d.Fqdn)
	builder.WriteString(", ")
	builder.WriteString("owner=")
	builder.WriteString(d.Owner)
	builder.WriteString(", ")
	builder.WriteString("approved=")
	builder.WriteString(fmt.Sprintf("%v", d.Approved))
	builder.WriteByte(')')
	return builder.String()
}

// Domains is a parsable slice of Domain.
type Domains []*Domain
