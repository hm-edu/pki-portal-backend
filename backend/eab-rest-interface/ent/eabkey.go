// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/hm-edu/eab-rest-interface/ent/eabkey"
)

// EABKey is the model entity for the EABKey schema.
type EABKey struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// User holds the value of the "user" field.
	User string `json:"user,omitempty"`
	// EabKey holds the value of the "eabKey" field.
	EabKey string `json:"eabKey,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EABKey) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case eabkey.FieldID:
			values[i] = new(sql.NullInt64)
		case eabkey.FieldUser, eabkey.FieldEabKey:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EABKey", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EABKey fields.
func (ek *EABKey) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eabkey.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ek.ID = int(value.Int64)
		case eabkey.FieldUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user", values[i])
			} else if value.Valid {
				ek.User = value.String
			}
		case eabkey.FieldEabKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field eabKey", values[i])
			} else if value.Valid {
				ek.EabKey = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this EABKey.
// Note that you need to call EABKey.Unwrap() before calling this method if this EABKey
// was returned from a transaction, and the transaction was committed or rolled back.
func (ek *EABKey) Update() *EABKeyUpdateOne {
	return (&EABKeyClient{config: ek.config}).UpdateOne(ek)
}

// Unwrap unwraps the EABKey entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ek *EABKey) Unwrap() *EABKey {
	tx, ok := ek.config.driver.(*txDriver)
	if !ok {
		panic("ent: EABKey is not a transactional entity")
	}
	ek.config.driver = tx.drv
	return ek
}

// String implements the fmt.Stringer.
func (ek *EABKey) String() string {
	var builder strings.Builder
	builder.WriteString("EABKey(")
	builder.WriteString(fmt.Sprintf("id=%v", ek.ID))
	builder.WriteString(", user=")
	builder.WriteString(ek.User)
	builder.WriteString(", eabKey=")
	builder.WriteString(ek.EabKey)
	builder.WriteByte(')')
	return builder.String()
}

// EABKeys is a parsable slice of EABKey.
type EABKeys []*EABKey

func (ek EABKeys) config(cfg config) {
	for _i := range ek {
		ek[_i].config = cfg
	}
}
